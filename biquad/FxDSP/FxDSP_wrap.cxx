/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_BS1770Meter swig_types[0]
#define SWIGTYPE_p_BS1770MeterD swig_types[1]
#define SWIGTYPE_p_BiquadFilter swig_types[2]
#define SWIGTYPE_p_BiquadFilterD swig_types[3]
#define SWIGTYPE_p_CircularBuffer swig_types[4]
#define SWIGTYPE_p_CircularBufferD swig_types[5]
#define SWIGTYPE_p_Decimator swig_types[6]
#define SWIGTYPE_p_DecimatorD swig_types[7]
#define SWIGTYPE_p_DiodeRectifier swig_types[8]
#define SWIGTYPE_p_DiodeRectifierD swig_types[9]
#define SWIGTYPE_p_DiodeSaturator swig_types[10]
#define SWIGTYPE_p_DiodeSaturatorD swig_types[11]
#define SWIGTYPE_p_Error swig_types[12]
#define SWIGTYPE_p_FFTComplex swig_types[13]
#define SWIGTYPE_p_FFTComplexD swig_types[14]
#define SWIGTYPE_p_FFTConfig swig_types[15]
#define SWIGTYPE_p_FFTConfigD swig_types[16]
#define SWIGTYPE_p_FFTSplitComplex swig_types[17]
#define SWIGTYPE_p_FFTSplitComplexD swig_types[18]
#define SWIGTYPE_p_FIRFilter swig_types[19]
#define SWIGTYPE_p_FIRFilterD swig_types[20]
#define SWIGTYPE_p_Filter_t swig_types[21]
#define SWIGTYPE_p_KWeightingFilter swig_types[22]
#define SWIGTYPE_p_KWeightingFilterD swig_types[23]
#define SWIGTYPE_p_LRFilter swig_types[24]
#define SWIGTYPE_p_LRFilterD swig_types[25]
#define SWIGTYPE_p_LadderFilter swig_types[26]
#define SWIGTYPE_p_MeterScale swig_types[27]
#define SWIGTYPE_p_MultibandFilter swig_types[28]
#define SWIGTYPE_p_MultibandFilterD swig_types[29]
#define SWIGTYPE_p_OnePole swig_types[30]
#define SWIGTYPE_p_OnePoleD swig_types[31]
#define SWIGTYPE_p_Opto swig_types[32]
#define SWIGTYPE_p_OptoD swig_types[33]
#define SWIGTYPE_p_PolySaturator swig_types[34]
#define SWIGTYPE_p_PolySaturatorD swig_types[35]
#define SWIGTYPE_p_RBJFilter swig_types[36]
#define SWIGTYPE_p_RBJFilterD swig_types[37]
#define SWIGTYPE_p_RMSEstimator swig_types[38]
#define SWIGTYPE_p_RMSEstimatorD swig_types[39]
#define SWIGTYPE_p_SpectrumAnalyzer swig_types[40]
#define SWIGTYPE_p_SpectrumAnalyzerD swig_types[41]
#define SWIGTYPE_p_Tape swig_types[42]
#define SWIGTYPE_p_TapeSpeed swig_types[43]
#define SWIGTYPE_p_Upsampler swig_types[44]
#define SWIGTYPE_p_UpsamplerD swig_types[45]
#define SWIGTYPE_p_WindowFunction swig_types[46]
#define SWIGTYPE_p_WindowFunctionD swig_types[47]
#define SWIGTYPE_p__ConvolutionMode swig_types[48]
#define SWIGTYPE_p__Opto_t swig_types[49]
#define SWIGTYPE_p__Window_t swig_types[50]
#define SWIGTYPE_p__bias_t swig_types[51]
#define SWIGTYPE_p_double swig_types[52]
#define SWIGTYPE_p_factor swig_types[53]
#define SWIGTYPE_p_float swig_types[54]
#define SWIGTYPE_p_p_double swig_types[55]
#define SWIGTYPE_p_p_float swig_types[56]
#define SWIGTYPE_p_p_p_double swig_types[57]
#define SWIGTYPE_p_p_p_float swig_types[58]
#define SWIGTYPE_p_short swig_types[59]
#define SWIGTYPE_p_unsigned_int swig_types[60]
static swig_type_info *swig_types[62];
static swig_module_info swig_module = {swig_types, 61, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "FxDSP"
#define SWIG_init      luaopen_FxDSP
#define SWIG_init_user luaopen_FxDSP_user

#define SWIG_LUACODE   luaopen_FxDSP_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include "BiquadFilter.h"
#include "bs1770.h"
#include "CircularBuffer.h"
#include "Decimator.h"
#include "DiodeRectifier.h"
#include "DiodeSaturator.h"
#include "Dsp.h"
#include "Error.h"
#include "FFT.h"
#include "FilterTypes.h"
#include "FIRFilter.h"
#include "LadderFilter.h"
#include "LinkwitzRileyFilter.h"
#include "Metering.h"
#include "MidiUtils.h"
#include "MultibandBank.h"
#include "OnePole.h"
#include "Optocoupler.h"
#include "PanLaw.h"
#include "PolyphaseCoeffs.h"
#include "PolySaturator.h"
#include "RBJFilter.h"
#include "RMSEstimator.h"
#include "SpectrumAnalyzer.h"
#include "Stereo.h"
#include "Tape.h"
#include "Upsampler.h"
#include "Utilities.h"
#include "WindowFunction.h"


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_BiquadFilterInit(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  BiquadFilter *result = 0 ;
  
  SWIG_check_num_args("BiquadFilterInit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BiquadFilterInit",1,"float const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BiquadFilterInit",2,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BiquadFilterInit",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BiquadFilterInit",2,SWIGTYPE_p_float);
  }
  
  result = (BiquadFilter *)BiquadFilterInit((float const *)arg1,(float const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BiquadFilter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterInitD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  BiquadFilterD *result = 0 ;
  
  SWIG_check_num_args("BiquadFilterInitD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BiquadFilterInitD",1,"double const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BiquadFilterInitD",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("BiquadFilterInitD",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("BiquadFilterInitD",2,SWIGTYPE_p_double);
  }
  
  result = (BiquadFilterD *)BiquadFilterInitD((double const *)arg1,(double const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BiquadFilterD,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterFree(lua_State* L) {
  int SWIG_arg = 0;
  BiquadFilter *arg1 = (BiquadFilter *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("BiquadFilterFree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BiquadFilterFree",1,"BiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilterFree",1,SWIGTYPE_p_BiquadFilter);
  }
  
  result = (Error_t)BiquadFilterFree(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterFreeD(lua_State* L) {
  int SWIG_arg = 0;
  BiquadFilterD *arg1 = (BiquadFilterD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("BiquadFilterFreeD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BiquadFilterFreeD",1,"BiquadFilterD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BiquadFilterD,0))){
    SWIG_fail_ptr("BiquadFilterFreeD",1,SWIGTYPE_p_BiquadFilterD);
  }
  
  result = (Error_t)BiquadFilterFreeD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterFlush(lua_State* L) {
  int SWIG_arg = 0;
  BiquadFilter *arg1 = (BiquadFilter *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("BiquadFilterFlush",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BiquadFilterFlush",1,"BiquadFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilterFlush",1,SWIGTYPE_p_BiquadFilter);
  }
  
  result = (Error_t)BiquadFilterFlush(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterFlushD(lua_State* L) {
  int SWIG_arg = 0;
  BiquadFilterD *arg1 = (BiquadFilterD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("BiquadFilterFlushD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BiquadFilterFlushD",1,"BiquadFilterD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BiquadFilterD,0))){
    SWIG_fail_ptr("BiquadFilterFlushD",1,SWIGTYPE_p_BiquadFilterD);
  }
  
  result = (Error_t)BiquadFilterFlushD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterProcess(lua_State* L) {
  int SWIG_arg = 0;
  BiquadFilter *arg1 = (BiquadFilter *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("BiquadFilterProcess",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BiquadFilterProcess",1,"BiquadFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BiquadFilterProcess",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("BiquadFilterProcess",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("BiquadFilterProcess",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilterProcess",1,SWIGTYPE_p_BiquadFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BiquadFilterProcess",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BiquadFilterProcess",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)BiquadFilterProcess(arg1,arg2,(float const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterProcessD(lua_State* L) {
  int SWIG_arg = 0;
  BiquadFilterD *arg1 = (BiquadFilterD *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("BiquadFilterProcessD",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BiquadFilterProcessD",1,"BiquadFilterD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BiquadFilterProcessD",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("BiquadFilterProcessD",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("BiquadFilterProcessD",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BiquadFilterD,0))){
    SWIG_fail_ptr("BiquadFilterProcessD",1,SWIGTYPE_p_BiquadFilterD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("BiquadFilterProcessD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("BiquadFilterProcessD",3,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)BiquadFilterProcessD(arg1,arg2,(double const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterTick(lua_State* L) {
  int SWIG_arg = 0;
  BiquadFilter *arg1 = (BiquadFilter *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("BiquadFilterTick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BiquadFilterTick",1,"BiquadFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BiquadFilterTick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilterTick",1,SWIGTYPE_p_BiquadFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)BiquadFilterTick(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterTickD(lua_State* L) {
  int SWIG_arg = 0;
  BiquadFilterD *arg1 = (BiquadFilterD *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("BiquadFilterTickD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BiquadFilterTickD",1,"BiquadFilterD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BiquadFilterTickD",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BiquadFilterD,0))){
    SWIG_fail_ptr("BiquadFilterTickD",1,SWIGTYPE_p_BiquadFilterD);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)BiquadFilterTickD(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterUpdateKernel(lua_State* L) {
  int SWIG_arg = 0;
  BiquadFilter *arg1 = (BiquadFilter *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("BiquadFilterUpdateKernel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BiquadFilterUpdateKernel",1,"BiquadFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BiquadFilterUpdateKernel",2,"float const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("BiquadFilterUpdateKernel",3,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BiquadFilter,0))){
    SWIG_fail_ptr("BiquadFilterUpdateKernel",1,SWIGTYPE_p_BiquadFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BiquadFilterUpdateKernel",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BiquadFilterUpdateKernel",3,SWIGTYPE_p_float);
  }
  
  result = (Error_t)BiquadFilterUpdateKernel(arg1,(float const *)arg2,(float const *)arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterUpdateKernelD(lua_State* L) {
  int SWIG_arg = 0;
  BiquadFilterD *arg1 = (BiquadFilterD *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("BiquadFilterUpdateKernelD",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BiquadFilterUpdateKernelD",1,"BiquadFilterD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BiquadFilterUpdateKernelD",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("BiquadFilterUpdateKernelD",3,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BiquadFilterD,0))){
    SWIG_fail_ptr("BiquadFilterUpdateKernelD",1,SWIGTYPE_p_BiquadFilterD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("BiquadFilterUpdateKernelD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("BiquadFilterUpdateKernelD",3,SWIGTYPE_p_double);
  }
  
  result = (Error_t)BiquadFilterUpdateKernelD(arg1,(double const *)arg2,(double const *)arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KWeightingFilterInit(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  KWeightingFilter *result = 0 ;
  
  SWIG_check_num_args("KWeightingFilterInit",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KWeightingFilterInit",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (KWeightingFilter *)KWeightingFilterInit(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KWeightingFilter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KWeightingFilterInitD(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  KWeightingFilterD *result = 0 ;
  
  SWIG_check_num_args("KWeightingFilterInitD",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KWeightingFilterInitD",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (KWeightingFilterD *)KWeightingFilterInitD(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KWeightingFilterD,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KWeightingFilterProcess(lua_State* L) {
  int SWIG_arg = 0;
  KWeightingFilter *arg1 = (KWeightingFilter *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("KWeightingFilterProcess",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KWeightingFilterProcess",1,"KWeightingFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KWeightingFilterProcess",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("KWeightingFilterProcess",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KWeightingFilterProcess",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KWeightingFilter,0))){
    SWIG_fail_ptr("KWeightingFilterProcess",1,SWIGTYPE_p_KWeightingFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("KWeightingFilterProcess",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("KWeightingFilterProcess",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)KWeightingFilterProcess(arg1,arg2,(float const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KWeightingFilterProcessD(lua_State* L) {
  int SWIG_arg = 0;
  KWeightingFilterD *arg1 = (KWeightingFilterD *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("KWeightingFilterProcessD",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KWeightingFilterProcessD",1,"KWeightingFilterD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KWeightingFilterProcessD",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("KWeightingFilterProcessD",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KWeightingFilterProcessD",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KWeightingFilterD,0))){
    SWIG_fail_ptr("KWeightingFilterProcessD",1,SWIGTYPE_p_KWeightingFilterD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("KWeightingFilterProcessD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("KWeightingFilterProcessD",3,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)KWeightingFilterProcessD(arg1,arg2,(double const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KWeightingFilterFlush(lua_State* L) {
  int SWIG_arg = 0;
  KWeightingFilter *arg1 = (KWeightingFilter *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("KWeightingFilterFlush",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KWeightingFilterFlush",1,"KWeightingFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KWeightingFilter,0))){
    SWIG_fail_ptr("KWeightingFilterFlush",1,SWIGTYPE_p_KWeightingFilter);
  }
  
  result = (Error_t)KWeightingFilterFlush(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KWeightingFilterFlushD(lua_State* L) {
  int SWIG_arg = 0;
  KWeightingFilterD *arg1 = (KWeightingFilterD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("KWeightingFilterFlushD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KWeightingFilterFlushD",1,"KWeightingFilterD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KWeightingFilterD,0))){
    SWIG_fail_ptr("KWeightingFilterFlushD",1,SWIGTYPE_p_KWeightingFilterD);
  }
  
  result = (Error_t)KWeightingFilterFlushD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KWeightingFilterFree(lua_State* L) {
  int SWIG_arg = 0;
  KWeightingFilter *arg1 = (KWeightingFilter *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("KWeightingFilterFree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KWeightingFilterFree",1,"KWeightingFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KWeightingFilter,0))){
    SWIG_fail_ptr("KWeightingFilterFree",1,SWIGTYPE_p_KWeightingFilter);
  }
  
  result = (Error_t)KWeightingFilterFree(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KWeightingFilterFreeD(lua_State* L) {
  int SWIG_arg = 0;
  KWeightingFilterD *arg1 = (KWeightingFilterD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("KWeightingFilterFreeD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KWeightingFilterFreeD",1,"KWeightingFilterD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KWeightingFilterD,0))){
    SWIG_fail_ptr("KWeightingFilterFreeD",1,SWIGTYPE_p_KWeightingFilterD);
  }
  
  result = (Error_t)KWeightingFilterFreeD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BS1770MeterInit(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  float arg2 ;
  BS1770Meter *result = 0 ;
  
  SWIG_check_num_args("BS1770MeterInit",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BS1770MeterInit",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BS1770MeterInit",2,"float");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (BS1770Meter *)BS1770MeterInit(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BS1770Meter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BS1770MeterInitD(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  double arg2 ;
  BS1770MeterD *result = 0 ;
  
  SWIG_check_num_args("BS1770MeterInitD",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("BS1770MeterInitD",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("BS1770MeterInitD",2,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (BS1770MeterD *)BS1770MeterInitD(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BS1770MeterD,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BS1770MeterProcess(lua_State* L) {
  int SWIG_arg = 0;
  BS1770Meter *arg1 = (BS1770Meter *) 0 ;
  float *arg2 = (float *) 0 ;
  float **arg3 = (float **) 0 ;
  float **arg4 = (float **) 0 ;
  unsigned int arg5 ;
  Error_t result;
  
  SWIG_check_num_args("BS1770MeterProcess",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BS1770MeterProcess",1,"BS1770Meter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BS1770MeterProcess",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("BS1770MeterProcess",3,"float **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("BS1770MeterProcess",4,"float const **");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("BS1770MeterProcess",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BS1770Meter,0))){
    SWIG_fail_ptr("BS1770MeterProcess",1,SWIGTYPE_p_BS1770Meter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BS1770MeterProcess",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("BS1770MeterProcess",3,SWIGTYPE_p_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_float,0))){
    SWIG_fail_ptr("BS1770MeterProcess",4,SWIGTYPE_p_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (Error_t)BS1770MeterProcess(arg1,arg2,arg3,(float const **)arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BS1770MeterProcessD(lua_State* L) {
  int SWIG_arg = 0;
  BS1770MeterD *arg1 = (BS1770MeterD *) 0 ;
  double *arg2 = (double *) 0 ;
  double **arg3 = (double **) 0 ;
  double **arg4 = (double **) 0 ;
  unsigned int arg5 ;
  Error_t result;
  
  SWIG_check_num_args("BS1770MeterProcessD",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BS1770MeterProcessD",1,"BS1770MeterD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("BS1770MeterProcessD",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("BS1770MeterProcessD",3,"double **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("BS1770MeterProcessD",4,"double const **");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("BS1770MeterProcessD",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BS1770MeterD,0))){
    SWIG_fail_ptr("BS1770MeterProcessD",1,SWIGTYPE_p_BS1770MeterD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("BS1770MeterProcessD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("BS1770MeterProcessD",3,SWIGTYPE_p_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_double,0))){
    SWIG_fail_ptr("BS1770MeterProcessD",4,SWIGTYPE_p_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (Error_t)BS1770MeterProcessD(arg1,arg2,arg3,(double const **)arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BS1770MeterFree(lua_State* L) {
  int SWIG_arg = 0;
  BS1770Meter *arg1 = (BS1770Meter *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("BS1770MeterFree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BS1770MeterFree",1,"BS1770Meter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BS1770Meter,0))){
    SWIG_fail_ptr("BS1770MeterFree",1,SWIGTYPE_p_BS1770Meter);
  }
  
  result = (Error_t)BS1770MeterFree(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BS1770MeterFreeD(lua_State* L) {
  int SWIG_arg = 0;
  BS1770MeterD *arg1 = (BS1770MeterD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("BS1770MeterFreeD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("BS1770MeterFreeD",1,"BS1770MeterD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BS1770MeterD,0))){
    SWIG_fail_ptr("BS1770MeterFreeD",1,SWIGTYPE_p_BS1770MeterD);
  }
  
  result = (Error_t)BS1770MeterFreeD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CircularBufferInit(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  CircularBuffer *result = 0 ;
  
  SWIG_check_num_args("CircularBufferInit",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CircularBufferInit",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (CircularBuffer *)CircularBufferInit(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CircularBuffer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CircularBufferInitD(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  CircularBufferD *result = 0 ;
  
  SWIG_check_num_args("CircularBufferInitD",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("CircularBufferInitD",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (CircularBufferD *)CircularBufferInitD(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_CircularBufferD,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CircularBufferFree(lua_State* L) {
  int SWIG_arg = 0;
  CircularBuffer *arg1 = (CircularBuffer *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("CircularBufferFree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CircularBufferFree",1,"CircularBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CircularBuffer,0))){
    SWIG_fail_ptr("CircularBufferFree",1,SWIGTYPE_p_CircularBuffer);
  }
  
  result = (Error_t)CircularBufferFree(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CircularBufferFreeD(lua_State* L) {
  int SWIG_arg = 0;
  CircularBufferD *arg1 = (CircularBufferD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("CircularBufferFreeD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CircularBufferFreeD",1,"CircularBufferD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CircularBufferD,0))){
    SWIG_fail_ptr("CircularBufferFreeD",1,SWIGTYPE_p_CircularBufferD);
  }
  
  result = (Error_t)CircularBufferFreeD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CircularBufferWrite(lua_State* L) {
  int SWIG_arg = 0;
  CircularBuffer *arg1 = (CircularBuffer *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int arg3 ;
  Error_t result;
  
  SWIG_check_num_args("CircularBufferWrite",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CircularBufferWrite",1,"CircularBuffer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CircularBufferWrite",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CircularBufferWrite",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CircularBuffer,0))){
    SWIG_fail_ptr("CircularBufferWrite",1,SWIGTYPE_p_CircularBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("CircularBufferWrite",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (Error_t)CircularBufferWrite(arg1,(float const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CircularBufferWriteD(lua_State* L) {
  int SWIG_arg = 0;
  CircularBufferD *arg1 = (CircularBufferD *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  Error_t result;
  
  SWIG_check_num_args("CircularBufferWriteD",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CircularBufferWriteD",1,"CircularBufferD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CircularBufferWriteD",2,"double const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CircularBufferWriteD",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CircularBufferD,0))){
    SWIG_fail_ptr("CircularBufferWriteD",1,SWIGTYPE_p_CircularBufferD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("CircularBufferWriteD",2,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (Error_t)CircularBufferWriteD(arg1,(double const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CircularBufferRead(lua_State* L) {
  int SWIG_arg = 0;
  CircularBuffer *arg1 = (CircularBuffer *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int arg3 ;
  Error_t result;
  
  SWIG_check_num_args("CircularBufferRead",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CircularBufferRead",1,"CircularBuffer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CircularBufferRead",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CircularBufferRead",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CircularBuffer,0))){
    SWIG_fail_ptr("CircularBufferRead",1,SWIGTYPE_p_CircularBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("CircularBufferRead",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (Error_t)CircularBufferRead(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CircularBufferReadD(lua_State* L) {
  int SWIG_arg = 0;
  CircularBufferD *arg1 = (CircularBufferD *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  Error_t result;
  
  SWIG_check_num_args("CircularBufferReadD",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CircularBufferReadD",1,"CircularBufferD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CircularBufferReadD",2,"double *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CircularBufferReadD",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CircularBufferD,0))){
    SWIG_fail_ptr("CircularBufferReadD",1,SWIGTYPE_p_CircularBufferD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("CircularBufferReadD",2,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (Error_t)CircularBufferReadD(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CircularBufferFlush(lua_State* L) {
  int SWIG_arg = 0;
  CircularBuffer *arg1 = (CircularBuffer *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("CircularBufferFlush",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CircularBufferFlush",1,"CircularBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CircularBuffer,0))){
    SWIG_fail_ptr("CircularBufferFlush",1,SWIGTYPE_p_CircularBuffer);
  }
  
  result = (Error_t)CircularBufferFlush(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CircularBufferFlushD(lua_State* L) {
  int SWIG_arg = 0;
  CircularBufferD *arg1 = (CircularBufferD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("CircularBufferFlushD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CircularBufferFlushD",1,"CircularBufferD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CircularBufferD,0))){
    SWIG_fail_ptr("CircularBufferFlushD",1,SWIGTYPE_p_CircularBufferD);
  }
  
  result = (Error_t)CircularBufferFlushD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CircularBufferRewind(lua_State* L) {
  int SWIG_arg = 0;
  CircularBuffer *arg1 = (CircularBuffer *) 0 ;
  unsigned int arg2 ;
  Error_t result;
  
  SWIG_check_num_args("CircularBufferRewind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CircularBufferRewind",1,"CircularBuffer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CircularBufferRewind",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CircularBuffer,0))){
    SWIG_fail_ptr("CircularBufferRewind",1,SWIGTYPE_p_CircularBuffer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Error_t)CircularBufferRewind(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CircularBufferRewindD(lua_State* L) {
  int SWIG_arg = 0;
  CircularBufferD *arg1 = (CircularBufferD *) 0 ;
  unsigned int arg2 ;
  Error_t result;
  
  SWIG_check_num_args("CircularBufferRewindD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CircularBufferRewindD",1,"CircularBufferD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CircularBufferRewindD",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CircularBufferD,0))){
    SWIG_fail_ptr("CircularBufferRewindD",1,SWIGTYPE_p_CircularBufferD);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Error_t)CircularBufferRewindD(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CircularBufferCount(lua_State* L) {
  int SWIG_arg = 0;
  CircularBuffer *arg1 = (CircularBuffer *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("CircularBufferCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CircularBufferCount",1,"CircularBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CircularBuffer,0))){
    SWIG_fail_ptr("CircularBufferCount",1,SWIGTYPE_p_CircularBuffer);
  }
  
  result = (unsigned int)CircularBufferCount(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CircularBufferCountD(lua_State* L) {
  int SWIG_arg = 0;
  CircularBufferD *arg1 = (CircularBufferD *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("CircularBufferCountD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CircularBufferCountD",1,"CircularBufferD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_CircularBufferD,0))){
    SWIG_fail_ptr("CircularBufferCountD",1,SWIGTYPE_p_CircularBufferD);
  }
  
  result = (unsigned int)CircularBufferCountD(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DecimatorInit(lua_State* L) {
  int SWIG_arg = 0;
  ResampleFactor_t arg1 ;
  Decimator *result = 0 ;
  
  SWIG_check_num_args("DecimatorInit",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DecimatorInit",1,"ResampleFactor_t");
  arg1 = (ResampleFactor_t)(int)lua_tonumber(L, 1);
  result = (Decimator *)DecimatorInit(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Decimator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DecimatorInitD(lua_State* L) {
  int SWIG_arg = 0;
  ResampleFactor_t arg1 ;
  DecimatorD *result = 0 ;
  
  SWIG_check_num_args("DecimatorInitD",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DecimatorInitD",1,"ResampleFactor_t");
  arg1 = (ResampleFactor_t)(int)lua_tonumber(L, 1);
  result = (DecimatorD *)DecimatorInitD(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DecimatorD,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DecimatorFree(lua_State* L) {
  int SWIG_arg = 0;
  Decimator *arg1 = (Decimator *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("DecimatorFree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DecimatorFree",1,"Decimator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Decimator,0))){
    SWIG_fail_ptr("DecimatorFree",1,SWIGTYPE_p_Decimator);
  }
  
  result = (Error_t)DecimatorFree(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DecimatorFreeD(lua_State* L) {
  int SWIG_arg = 0;
  DecimatorD *arg1 = (DecimatorD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("DecimatorFreeD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DecimatorFreeD",1,"DecimatorD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DecimatorD,0))){
    SWIG_fail_ptr("DecimatorFreeD",1,SWIGTYPE_p_DecimatorD);
  }
  
  result = (Error_t)DecimatorFreeD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DecimatorFlush(lua_State* L) {
  int SWIG_arg = 0;
  Decimator *arg1 = (Decimator *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("DecimatorFlush",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DecimatorFlush",1,"Decimator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Decimator,0))){
    SWIG_fail_ptr("DecimatorFlush",1,SWIGTYPE_p_Decimator);
  }
  
  result = (Error_t)DecimatorFlush(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DecimatorFlushD(lua_State* L) {
  int SWIG_arg = 0;
  DecimatorD *arg1 = (DecimatorD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("DecimatorFlushD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DecimatorFlushD",1,"DecimatorD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DecimatorD,0))){
    SWIG_fail_ptr("DecimatorFlushD",1,SWIGTYPE_p_DecimatorD);
  }
  
  result = (Error_t)DecimatorFlushD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DecimatorProcess(lua_State* L) {
  int SWIG_arg = 0;
  Decimator *arg1 = (Decimator *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("DecimatorProcess",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DecimatorProcess",1,"Decimator *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DecimatorProcess",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("DecimatorProcess",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DecimatorProcess",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Decimator,0))){
    SWIG_fail_ptr("DecimatorProcess",1,SWIGTYPE_p_Decimator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DecimatorProcess",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DecimatorProcess",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)DecimatorProcess(arg1,arg2,(float const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DecimatorProcessD(lua_State* L) {
  int SWIG_arg = 0;
  DecimatorD *arg1 = (DecimatorD *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("DecimatorProcessD",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DecimatorProcessD",1,"DecimatorD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DecimatorProcessD",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("DecimatorProcessD",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DecimatorProcessD",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DecimatorD,0))){
    SWIG_fail_ptr("DecimatorProcessD",1,SWIGTYPE_p_DecimatorD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("DecimatorProcessD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("DecimatorProcessD",3,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)DecimatorProcessD(arg1,arg2,(double const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DiodeRectifierInit(lua_State* L) {
  int SWIG_arg = 0;
  bias_t arg1 ;
  float arg2 ;
  DiodeRectifier *result = 0 ;
  
  SWIG_check_num_args("DiodeRectifierInit",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DiodeRectifierInit",1,"bias_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DiodeRectifierInit",2,"float");
  arg1 = (bias_t)(int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (DiodeRectifier *)DiodeRectifierInit(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DiodeRectifier,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DiodeRectifierInitD(lua_State* L) {
  int SWIG_arg = 0;
  bias_t arg1 ;
  double arg2 ;
  DiodeRectifierD *result = 0 ;
  
  SWIG_check_num_args("DiodeRectifierInitD",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DiodeRectifierInitD",1,"bias_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DiodeRectifierInitD",2,"double");
  arg1 = (bias_t)(int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (DiodeRectifierD *)DiodeRectifierInitD(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DiodeRectifierD,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DiodeRectifierFree(lua_State* L) {
  int SWIG_arg = 0;
  DiodeRectifier *arg1 = (DiodeRectifier *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("DiodeRectifierFree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DiodeRectifierFree",1,"DiodeRectifier *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiodeRectifier,0))){
    SWIG_fail_ptr("DiodeRectifierFree",1,SWIGTYPE_p_DiodeRectifier);
  }
  
  result = (Error_t)DiodeRectifierFree(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DiodeRectifierFreeD(lua_State* L) {
  int SWIG_arg = 0;
  DiodeRectifierD *arg1 = (DiodeRectifierD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("DiodeRectifierFreeD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DiodeRectifierFreeD",1,"DiodeRectifierD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiodeRectifierD,0))){
    SWIG_fail_ptr("DiodeRectifierFreeD",1,SWIGTYPE_p_DiodeRectifierD);
  }
  
  result = (Error_t)DiodeRectifierFreeD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DiodeRectifierSetThreshold(lua_State* L) {
  int SWIG_arg = 0;
  DiodeRectifier *arg1 = (DiodeRectifier *) 0 ;
  float arg2 ;
  Error_t result;
  
  SWIG_check_num_args("DiodeRectifierSetThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DiodeRectifierSetThreshold",1,"DiodeRectifier *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DiodeRectifierSetThreshold",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiodeRectifier,0))){
    SWIG_fail_ptr("DiodeRectifierSetThreshold",1,SWIGTYPE_p_DiodeRectifier);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (Error_t)DiodeRectifierSetThreshold(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DiodeRectifierSetThresholdD(lua_State* L) {
  int SWIG_arg = 0;
  DiodeRectifierD *arg1 = (DiodeRectifierD *) 0 ;
  double arg2 ;
  Error_t result;
  
  SWIG_check_num_args("DiodeRectifierSetThresholdD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DiodeRectifierSetThresholdD",1,"DiodeRectifierD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DiodeRectifierSetThresholdD",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiodeRectifierD,0))){
    SWIG_fail_ptr("DiodeRectifierSetThresholdD",1,SWIGTYPE_p_DiodeRectifierD);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (Error_t)DiodeRectifierSetThresholdD(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DiodeRectifierProcess(lua_State* L) {
  int SWIG_arg = 0;
  DiodeRectifier *arg1 = (DiodeRectifier *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("DiodeRectifierProcess",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DiodeRectifierProcess",1,"DiodeRectifier *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DiodeRectifierProcess",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("DiodeRectifierProcess",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DiodeRectifierProcess",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiodeRectifier,0))){
    SWIG_fail_ptr("DiodeRectifierProcess",1,SWIGTYPE_p_DiodeRectifier);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DiodeRectifierProcess",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DiodeRectifierProcess",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)DiodeRectifierProcess(arg1,arg2,(float const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DiodeRectifierProcessD(lua_State* L) {
  int SWIG_arg = 0;
  DiodeRectifierD *arg1 = (DiodeRectifierD *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("DiodeRectifierProcessD",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DiodeRectifierProcessD",1,"DiodeRectifierD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DiodeRectifierProcessD",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("DiodeRectifierProcessD",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DiodeRectifierProcessD",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiodeRectifierD,0))){
    SWIG_fail_ptr("DiodeRectifierProcessD",1,SWIGTYPE_p_DiodeRectifierD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("DiodeRectifierProcessD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("DiodeRectifierProcessD",3,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)DiodeRectifierProcessD(arg1,arg2,(double const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DiodeRectifierTick(lua_State* L) {
  int SWIG_arg = 0;
  DiodeRectifier *arg1 = (DiodeRectifier *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("DiodeRectifierTick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DiodeRectifierTick",1,"DiodeRectifier *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DiodeRectifierTick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiodeRectifier,0))){
    SWIG_fail_ptr("DiodeRectifierTick",1,SWIGTYPE_p_DiodeRectifier);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)DiodeRectifierTick(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DiodeRectifierTickD(lua_State* L) {
  int SWIG_arg = 0;
  DiodeRectifierD *arg1 = (DiodeRectifierD *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("DiodeRectifierTickD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DiodeRectifierTickD",1,"DiodeRectifierD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DiodeRectifierTickD",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiodeRectifierD,0))){
    SWIG_fail_ptr("DiodeRectifierTickD",1,SWIGTYPE_p_DiodeRectifierD);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)DiodeRectifierTickD(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DiodeSaturatorInit(lua_State* L) {
  int SWIG_arg = 0;
  bias_t arg1 ;
  float arg2 ;
  DiodeSaturator *result = 0 ;
  
  SWIG_check_num_args("DiodeSaturatorInit",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DiodeSaturatorInit",1,"bias_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DiodeSaturatorInit",2,"float");
  arg1 = (bias_t)(int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (DiodeSaturator *)DiodeSaturatorInit(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DiodeSaturator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DiodeSaturatorInitD(lua_State* L) {
  int SWIG_arg = 0;
  bias_t arg1 ;
  double arg2 ;
  DiodeSaturatorD *result = 0 ;
  
  SWIG_check_num_args("DiodeSaturatorInitD",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DiodeSaturatorInitD",1,"bias_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DiodeSaturatorInitD",2,"double");
  arg1 = (bias_t)(int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (DiodeSaturatorD *)DiodeSaturatorInitD(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DiodeSaturatorD,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DiodeSaturatorFree(lua_State* L) {
  int SWIG_arg = 0;
  DiodeSaturator *arg1 = (DiodeSaturator *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("DiodeSaturatorFree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DiodeSaturatorFree",1,"DiodeSaturator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiodeSaturator,0))){
    SWIG_fail_ptr("DiodeSaturatorFree",1,SWIGTYPE_p_DiodeSaturator);
  }
  
  result = (Error_t)DiodeSaturatorFree(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DiodeSaturatorFreeD(lua_State* L) {
  int SWIG_arg = 0;
  DiodeSaturatorD *arg1 = (DiodeSaturatorD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("DiodeSaturatorFreeD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DiodeSaturatorFreeD",1,"DiodeSaturatorD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiodeSaturatorD,0))){
    SWIG_fail_ptr("DiodeSaturatorFreeD",1,SWIGTYPE_p_DiodeSaturatorD);
  }
  
  result = (Error_t)DiodeSaturatorFreeD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DiodeSaturatorSetAmount(lua_State* L) {
  int SWIG_arg = 0;
  DiodeSaturator *arg1 = (DiodeSaturator *) 0 ;
  float arg2 ;
  Error_t result;
  
  SWIG_check_num_args("DiodeSaturatorSetAmount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DiodeSaturatorSetAmount",1,"DiodeSaturator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DiodeSaturatorSetAmount",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiodeSaturator,0))){
    SWIG_fail_ptr("DiodeSaturatorSetAmount",1,SWIGTYPE_p_DiodeSaturator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (Error_t)DiodeSaturatorSetAmount(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DiodeSaturatorSetAmountD(lua_State* L) {
  int SWIG_arg = 0;
  DiodeSaturatorD *arg1 = (DiodeSaturatorD *) 0 ;
  double arg2 ;
  Error_t result;
  
  SWIG_check_num_args("DiodeSaturatorSetAmountD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DiodeSaturatorSetAmountD",1,"DiodeSaturatorD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DiodeSaturatorSetAmountD",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiodeSaturatorD,0))){
    SWIG_fail_ptr("DiodeSaturatorSetAmountD",1,SWIGTYPE_p_DiodeSaturatorD);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (Error_t)DiodeSaturatorSetAmountD(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DiodeSaturatorProcess(lua_State* L) {
  int SWIG_arg = 0;
  DiodeSaturator *arg1 = (DiodeSaturator *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("DiodeSaturatorProcess",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DiodeSaturatorProcess",1,"DiodeSaturator *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DiodeSaturatorProcess",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("DiodeSaturatorProcess",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DiodeSaturatorProcess",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiodeSaturator,0))){
    SWIG_fail_ptr("DiodeSaturatorProcess",1,SWIGTYPE_p_DiodeSaturator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DiodeSaturatorProcess",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DiodeSaturatorProcess",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)DiodeSaturatorProcess(arg1,arg2,(float const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DiodeSaturatorProcessD(lua_State* L) {
  int SWIG_arg = 0;
  DiodeSaturatorD *arg1 = (DiodeSaturatorD *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("DiodeSaturatorProcessD",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DiodeSaturatorProcessD",1,"DiodeSaturatorD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DiodeSaturatorProcessD",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("DiodeSaturatorProcessD",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DiodeSaturatorProcessD",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiodeSaturatorD,0))){
    SWIG_fail_ptr("DiodeSaturatorProcessD",1,SWIGTYPE_p_DiodeSaturatorD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("DiodeSaturatorProcessD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("DiodeSaturatorProcessD",3,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)DiodeSaturatorProcessD(arg1,arg2,(double const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DiodeSaturatorTick(lua_State* L) {
  int SWIG_arg = 0;
  DiodeSaturator *arg1 = (DiodeSaturator *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("DiodeSaturatorTick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DiodeSaturatorTick",1,"DiodeSaturator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DiodeSaturatorTick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiodeSaturator,0))){
    SWIG_fail_ptr("DiodeSaturatorTick",1,SWIGTYPE_p_DiodeSaturator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)DiodeSaturatorTick(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DiodeSaturatorTickD(lua_State* L) {
  int SWIG_arg = 0;
  DiodeSaturatorD *arg1 = (DiodeSaturatorD *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("DiodeSaturatorTickD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DiodeSaturatorTickD",1,"DiodeSaturatorD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DiodeSaturatorTickD",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiodeSaturatorD,0))){
    SWIG_fail_ptr("DiodeSaturatorTickD",1,SWIGTYPE_p_DiodeSaturatorD);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)DiodeSaturatorTickD(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatBufferToInt16(lua_State* L) {
  int SWIG_arg = 0;
  short *arg1 = (short *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int arg3 ;
  Error_t result;
  
  SWIG_check_num_args("FloatBufferToInt16",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatBufferToInt16",1,"short *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FloatBufferToInt16",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatBufferToInt16",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_short,0))){
    SWIG_fail_ptr("FloatBufferToInt16",1,SWIGTYPE_p_short);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatBufferToInt16",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (Error_t)FloatBufferToInt16(arg1,(float const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleBufferToInt16(lua_State* L) {
  int SWIG_arg = 0;
  short *arg1 = (short *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  Error_t result;
  
  SWIG_check_num_args("DoubleBufferToInt16",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DoubleBufferToInt16",1,"short *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DoubleBufferToInt16",2,"double const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DoubleBufferToInt16",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_short,0))){
    SWIG_fail_ptr("DoubleBufferToInt16",1,SWIGTYPE_p_short);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("DoubleBufferToInt16",2,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (Error_t)DoubleBufferToInt16(arg1,(double const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16BufferToFloat(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  short *arg2 = (short *) 0 ;
  unsigned int arg3 ;
  Error_t result;
  
  SWIG_check_num_args("Int16BufferToFloat",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Int16BufferToFloat",1,"float *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Int16BufferToFloat",2,"short const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Int16BufferToFloat",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Int16BufferToFloat",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_short,0))){
    SWIG_fail_ptr("Int16BufferToFloat",2,SWIGTYPE_p_short);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (Error_t)Int16BufferToFloat(arg1,(short const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Int16BufferToDouble(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  short *arg2 = (short *) 0 ;
  unsigned int arg3 ;
  Error_t result;
  
  SWIG_check_num_args("Int16BufferToDouble",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Int16BufferToDouble",1,"double *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Int16BufferToDouble",2,"short const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Int16BufferToDouble",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Int16BufferToDouble",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_short,0))){
    SWIG_fail_ptr("Int16BufferToDouble",2,SWIGTYPE_p_short);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (Error_t)Int16BufferToDouble(arg1,(short const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DoubleToFloat(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  Error_t result;
  
  SWIG_check_num_args("DoubleToFloat",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DoubleToFloat",1,"float *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DoubleToFloat",2,"double const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DoubleToFloat",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("DoubleToFloat",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("DoubleToFloat",2,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (Error_t)DoubleToFloat(arg1,(double const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatToDouble(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int arg3 ;
  Error_t result;
  
  SWIG_check_num_args("FloatToDouble",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatToDouble",1,"double *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FloatToDouble",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatToDouble",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FloatToDouble",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatToDouble",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (Error_t)FloatToDouble(arg1,(float const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FillBuffer(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  Error_t result;
  
  SWIG_check_num_args("FillBuffer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FillBuffer",1,"float *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FillBuffer",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FillBuffer",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FillBuffer",1,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (Error_t)FillBuffer(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FillBufferD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  Error_t result;
  
  SWIG_check_num_args("FillBufferD",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FillBufferD",1,"double *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FillBufferD",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FillBufferD",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FillBufferD",1,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (Error_t)FillBufferD(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClearBuffer(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  unsigned int arg2 ;
  Error_t result;
  
  SWIG_check_num_args("ClearBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClearBuffer",1,"float *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClearBuffer",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ClearBuffer",1,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Error_t)ClearBuffer(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ClearBufferD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  Error_t result;
  
  SWIG_check_num_args("ClearBufferD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ClearBufferD",1,"double *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ClearBufferD",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ClearBufferD",1,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (Error_t)ClearBufferD(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CopyBuffer(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int arg3 ;
  Error_t result;
  
  SWIG_check_num_args("CopyBuffer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CopyBuffer",1,"float *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CopyBuffer",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CopyBuffer",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("CopyBuffer",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("CopyBuffer",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (Error_t)CopyBuffer(arg1,(float const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CopyBufferD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  Error_t result;
  
  SWIG_check_num_args("CopyBufferD",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CopyBufferD",1,"double *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("CopyBufferD",2,"double const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("CopyBufferD",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("CopyBufferD",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("CopyBufferD",2,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (Error_t)CopyBufferD(arg1,(double const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CopyBufferStride(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  unsigned int arg2 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  Error_t result;
  
  SWIG_check_num_args("CopyBufferStride",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CopyBufferStride",1,"float *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CopyBufferStride",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CopyBufferStride",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CopyBufferStride",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CopyBufferStride",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("CopyBufferStride",1,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("CopyBufferStride",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (Error_t)CopyBufferStride(arg1,arg2,(float const *)arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CopyBufferStrideD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  double *arg3 = (double *) 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  Error_t result;
  
  SWIG_check_num_args("CopyBufferStrideD",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("CopyBufferStrideD",1,"double *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("CopyBufferStrideD",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("CopyBufferStrideD",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("CopyBufferStrideD",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("CopyBufferStrideD",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("CopyBufferStrideD",1,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("CopyBufferStrideD",3,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (Error_t)CopyBufferStrideD(arg1,arg2,(double const *)arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SplitToInterleaved(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("SplitToInterleaved",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SplitToInterleaved",1,"float *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SplitToInterleaved",2,"float const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SplitToInterleaved",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SplitToInterleaved",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SplitToInterleaved",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SplitToInterleaved",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SplitToInterleaved",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)SplitToInterleaved(arg1,(float const *)arg2,(float const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SplitToInterleavedD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("SplitToInterleavedD",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SplitToInterleavedD",1,"double *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SplitToInterleavedD",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("SplitToInterleavedD",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("SplitToInterleavedD",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("SplitToInterleavedD",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("SplitToInterleavedD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("SplitToInterleavedD",3,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)SplitToInterleavedD(arg1,(double const *)arg2,(double const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InterleavedToSplit(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("InterleavedToSplit",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("InterleavedToSplit",1,"float *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("InterleavedToSplit",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("InterleavedToSplit",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("InterleavedToSplit",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("InterleavedToSplit",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("InterleavedToSplit",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("InterleavedToSplit",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)InterleavedToSplit(arg1,arg2,(float const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InterleavedToSplitD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("InterleavedToSplitD",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("InterleavedToSplitD",1,"double *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("InterleavedToSplitD",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("InterleavedToSplitD",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("InterleavedToSplitD",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("InterleavedToSplitD",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("InterleavedToSplitD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("InterleavedToSplitD",3,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)InterleavedToSplitD(arg1,arg2,(double const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorAbs(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int arg3 ;
  Error_t result;
  
  SWIG_check_num_args("VectorAbs",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorAbs",1,"float *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VectorAbs",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("VectorAbs",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorAbs",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorAbs",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (Error_t)VectorAbs(arg1,(float const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorAbsD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  Error_t result;
  
  SWIG_check_num_args("VectorAbsD",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorAbsD",1,"double *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VectorAbsD",2,"double const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("VectorAbsD",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorAbsD",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorAbsD",2,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (Error_t)VectorAbsD(arg1,(double const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorNegate(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int arg3 ;
  Error_t result;
  
  SWIG_check_num_args("VectorNegate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorNegate",1,"float *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VectorNegate",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("VectorNegate",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorNegate",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorNegate",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (Error_t)VectorNegate(arg1,(float const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorNegateD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  Error_t result;
  
  SWIG_check_num_args("VectorNegateD",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorNegateD",1,"double *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VectorNegateD",2,"double const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("VectorNegateD",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorNegateD",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorNegateD",2,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (Error_t)VectorNegateD(arg1,(double const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorSum(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  unsigned int arg2 ;
  float result;
  
  SWIG_check_num_args("VectorSum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorSum",1,"float const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VectorSum",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorSum",1,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (float)VectorSum((float const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorSumD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  double result;
  
  SWIG_check_num_args("VectorSumD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorSumD",1,"double const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VectorSumD",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorSumD",1,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (double)VectorSumD((double const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorMax(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  unsigned int arg2 ;
  float result;
  
  SWIG_check_num_args("VectorMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorMax",1,"float const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VectorMax",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorMax",1,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (float)VectorMax((float const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorMaxD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  double result;
  
  SWIG_check_num_args("VectorMaxD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorMaxD",1,"double const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VectorMaxD",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorMaxD",1,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (double)VectorMaxD((double const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorMaxVI(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("VectorMaxVI",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorMaxVI",1,"float *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VectorMaxVI",2,"unsigned int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("VectorMaxVI",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("VectorMaxVI",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorMaxVI",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("VectorMaxVI",2,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorMaxVI",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)VectorMaxVI(arg1,arg2,(float const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorMaxVID(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("VectorMaxVID",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorMaxVID",1,"double *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VectorMaxVID",2,"unsigned int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("VectorMaxVID",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("VectorMaxVID",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorMaxVID",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("VectorMaxVID",2,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorMaxVID",3,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)VectorMaxVID(arg1,arg2,(double const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorMin(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  unsigned int arg2 ;
  float result;
  
  SWIG_check_num_args("VectorMin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorMin",1,"float const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VectorMin",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorMin",1,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (float)VectorMin((float const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorMinD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  double result;
  
  SWIG_check_num_args("VectorMinD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorMinD",1,"double const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("VectorMinD",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorMinD",1,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (double)VectorMinD((double const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorMinVI(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("VectorMinVI",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorMinVI",1,"float *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VectorMinVI",2,"unsigned int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("VectorMinVI",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("VectorMinVI",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorMinVI",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("VectorMinVI",2,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorMinVI",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)VectorMinVI(arg1,arg2,(float const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorMinVID(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("VectorMinVID",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorMinVID",1,"double *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VectorMinVID",2,"unsigned int *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("VectorMinVID",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("VectorMinVID",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorMinVID",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("VectorMinVID",2,SWIGTYPE_p_unsigned_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorMinVID",3,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)VectorMinVID(arg1,arg2,(double const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorVectorAdd(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("VectorVectorAdd",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorVectorAdd",1,"float *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VectorVectorAdd",2,"float const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("VectorVectorAdd",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("VectorVectorAdd",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorVectorAdd",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorVectorAdd",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorVectorAdd",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)VectorVectorAdd(arg1,(float const *)arg2,(float const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorVectorAddD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("VectorVectorAddD",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorVectorAddD",1,"double *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VectorVectorAddD",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("VectorVectorAddD",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("VectorVectorAddD",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorVectorAddD",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorVectorAddD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorVectorAddD",3,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)VectorVectorAddD(arg1,(double const *)arg2,(double const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorVectorSub(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("VectorVectorSub",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorVectorSub",1,"float *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VectorVectorSub",2,"float const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("VectorVectorSub",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("VectorVectorSub",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorVectorSub",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorVectorSub",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorVectorSub",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)VectorVectorSub(arg1,(float const *)arg2,(float const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorVectorSubD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("VectorVectorSubD",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorVectorSubD",1,"double *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VectorVectorSubD",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("VectorVectorSubD",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("VectorVectorSubD",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorVectorSubD",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorVectorSubD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorVectorSubD",3,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)VectorVectorSubD(arg1,(double const *)arg2,(double const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorScalarAdd(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("VectorScalarAdd",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorScalarAdd",1,"float *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VectorScalarAdd",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("VectorScalarAdd",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("VectorScalarAdd",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorScalarAdd",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorScalarAdd",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float const)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)VectorScalarAdd(arg1,(float const *)arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorScalarAddD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("VectorScalarAddD",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorScalarAddD",1,"double *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VectorScalarAddD",2,"double const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("VectorScalarAddD",3,"double const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("VectorScalarAddD",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorScalarAddD",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorScalarAddD",2,SWIGTYPE_p_double);
  }
  
  arg3 = (double const)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)VectorScalarAddD(arg1,(double const *)arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorVectorMultiply(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("VectorVectorMultiply",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorVectorMultiply",1,"float *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VectorVectorMultiply",2,"float const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("VectorVectorMultiply",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("VectorVectorMultiply",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorVectorMultiply",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorVectorMultiply",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorVectorMultiply",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)VectorVectorMultiply(arg1,(float const *)arg2,(float const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorVectorMultiplyD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("VectorVectorMultiplyD",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorVectorMultiplyD",1,"double *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VectorVectorMultiplyD",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("VectorVectorMultiplyD",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("VectorVectorMultiplyD",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorVectorMultiplyD",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorVectorMultiplyD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorVectorMultiplyD",3,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)VectorVectorMultiplyD(arg1,(double const *)arg2,(double const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorScalarMultiply(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("VectorScalarMultiply",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorScalarMultiply",1,"float *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VectorScalarMultiply",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("VectorScalarMultiply",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("VectorScalarMultiply",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorScalarMultiply",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorScalarMultiply",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float const)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)VectorScalarMultiply(arg1,(float const *)arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorScalarMultiplyD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("VectorScalarMultiplyD",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorScalarMultiplyD",1,"double *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VectorScalarMultiplyD",2,"double const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("VectorScalarMultiplyD",3,"double const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("VectorScalarMultiplyD",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorScalarMultiplyD",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorScalarMultiplyD",2,SWIGTYPE_p_double);
  }
  
  arg3 = (double const)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)VectorScalarMultiplyD(arg1,(double const *)arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorVectorMix(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  unsigned int arg6 ;
  Error_t result;
  
  SWIG_check_num_args("VectorVectorMix",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorVectorMix",1,"float *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VectorVectorMix",2,"float const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("VectorVectorMix",3,"float const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("VectorVectorMix",4,"float const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("VectorVectorMix",5,"float const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("VectorVectorMix",6,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorVectorMix",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorVectorMix",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorVectorMix",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorVectorMix",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorVectorMix",5,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative");
  arg6 = (unsigned int)lua_tonumber(L, 6);
  result = (Error_t)VectorVectorMix(arg1,(float const *)arg2,(float const *)arg3,(float const *)arg4,(float const *)arg5,arg6);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorVectorMixD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  unsigned int arg6 ;
  Error_t result;
  
  SWIG_check_num_args("VectorVectorMixD",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorVectorMixD",1,"double *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VectorVectorMixD",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("VectorVectorMixD",3,"double const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("VectorVectorMixD",4,"double const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("VectorVectorMixD",5,"double const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("VectorVectorMixD",6,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorVectorMixD",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorVectorMixD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorVectorMixD",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorVectorMixD",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorVectorMixD",5,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative");
  arg6 = (unsigned int)lua_tonumber(L, 6);
  result = (Error_t)VectorVectorMixD(arg1,(double const *)arg2,(double const *)arg3,(double const *)arg4,(double const *)arg5,arg6);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorVectorSumScale(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  unsigned int arg5 ;
  Error_t result;
  
  SWIG_check_num_args("VectorVectorSumScale",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorVectorSumScale",1,"float *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VectorVectorSumScale",2,"float const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("VectorVectorSumScale",3,"float const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("VectorVectorSumScale",4,"float const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("VectorVectorSumScale",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorVectorSumScale",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorVectorSumScale",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorVectorSumScale",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorVectorSumScale",4,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (Error_t)VectorVectorSumScale(arg1,(float const *)arg2,(float const *)arg3,(float const *)arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorVectorSumScaleD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  unsigned int arg5 ;
  Error_t result;
  
  SWIG_check_num_args("VectorVectorSumScaleD",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorVectorSumScaleD",1,"double *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VectorVectorSumScaleD",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("VectorVectorSumScaleD",3,"double const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("VectorVectorSumScaleD",4,"double const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("VectorVectorSumScaleD",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorVectorSumScaleD",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorVectorSumScaleD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorVectorSumScaleD",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorVectorSumScaleD",4,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (Error_t)VectorVectorSumScaleD(arg1,(double const *)arg2,(double const *)arg3,(double const *)arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorPower(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("VectorPower",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorPower",1,"float *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VectorPower",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("VectorPower",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("VectorPower",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorPower",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorPower",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)VectorPower(arg1,(float const *)arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorPowerD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("VectorPowerD",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorPowerD",1,"double *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VectorPowerD",2,"double const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("VectorPowerD",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("VectorPowerD",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorPowerD",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorPowerD",2,SWIGTYPE_p_double);
  }
  
  arg3 = (double)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)VectorPowerD(arg1,(double const *)arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Convolve(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  unsigned int arg2 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  float *arg5 = (float *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("Convolve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Convolve",1,"float *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Convolve",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Convolve",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Convolve",4,"unsigned int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Convolve",5,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Convolve",1,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Convolve",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Convolve",5,SWIGTYPE_p_float);
  }
  
  result = (Error_t)Convolve(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvolveD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  double *arg3 = (double *) 0 ;
  unsigned int arg4 ;
  double *arg5 = (double *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("ConvolveD",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ConvolveD",1,"double *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ConvolveD",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ConvolveD",3,"double *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ConvolveD",4,"unsigned int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ConvolveD",5,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ConvolveD",1,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ConvolveD",3,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ConvolveD",5,SWIGTYPE_p_double);
  }
  
  result = (Error_t)ConvolveD(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorDbConvert(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int arg3 ;
  Error_t result;
  
  SWIG_check_num_args("VectorDbConvert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorDbConvert",1,"float *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VectorDbConvert",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("VectorDbConvert",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorDbConvert",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorDbConvert",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (Error_t)VectorDbConvert(arg1,(float const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorDbConvertD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  Error_t result;
  
  SWIG_check_num_args("VectorDbConvertD",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorDbConvertD",1,"double *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VectorDbConvertD",2,"double const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("VectorDbConvertD",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorDbConvertD",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorDbConvertD",2,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (Error_t)VectorDbConvertD(arg1,(double const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMultiply(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  unsigned int arg7 ;
  Error_t result;
  
  SWIG_check_num_args("ComplexMultiply",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMultiply",1,"float *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ComplexMultiply",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ComplexMultiply",3,"float const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ComplexMultiply",4,"float const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ComplexMultiply",5,"float const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ComplexMultiply",6,"float const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ComplexMultiply",7,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ComplexMultiply",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ComplexMultiply",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ComplexMultiply",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ComplexMultiply",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ComplexMultiply",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("ComplexMultiply",6,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative");
  arg7 = (unsigned int)lua_tonumber(L, 7);
  result = (Error_t)ComplexMultiply(arg1,arg2,(float const *)arg3,(float const *)arg4,(float const *)arg5,(float const *)arg6,arg7);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMultiplyD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  unsigned int arg7 ;
  Error_t result;
  
  SWIG_check_num_args("ComplexMultiplyD",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMultiplyD",1,"double *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ComplexMultiplyD",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ComplexMultiplyD",3,"double const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ComplexMultiplyD",4,"double const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ComplexMultiplyD",5,"double const *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ComplexMultiplyD",6,"double const *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ComplexMultiplyD",7,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMultiplyD",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMultiplyD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMultiplyD",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMultiplyD",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMultiplyD",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMultiplyD",6,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,7)>=0),"number must not be negative");
  arg7 = (unsigned int)lua_tonumber(L, 7);
  result = (Error_t)ComplexMultiplyD(arg1,arg2,(double const *)arg3,(double const *)arg4,(double const *)arg5,(double const *)arg6,arg7);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorRectToPolar(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  unsigned int arg5 ;
  Error_t result;
  
  SWIG_check_num_args("VectorRectToPolar",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorRectToPolar",1,"float *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VectorRectToPolar",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("VectorRectToPolar",3,"float const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("VectorRectToPolar",4,"float const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("VectorRectToPolar",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorRectToPolar",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorRectToPolar",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorRectToPolar",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("VectorRectToPolar",4,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (Error_t)VectorRectToPolar(arg1,arg2,(float const *)arg3,(float const *)arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VectorRectToPolarD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  unsigned int arg5 ;
  Error_t result;
  
  SWIG_check_num_args("VectorRectToPolarD",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("VectorRectToPolarD",1,"double *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("VectorRectToPolarD",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("VectorRectToPolarD",3,"double const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("VectorRectToPolarD",4,"double const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("VectorRectToPolarD",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorRectToPolarD",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorRectToPolarD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorRectToPolarD",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("VectorRectToPolarD",4,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  result = (Error_t)VectorRectToPolarD(arg1,arg2,(double const *)arg3,(double const *)arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeanSquare(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  unsigned int arg2 ;
  float result;
  
  SWIG_check_num_args("MeanSquare",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MeanSquare",1,"float const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MeanSquare",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MeanSquare",1,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (float)MeanSquare((float const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeanSquareD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  double result;
  
  SWIG_check_num_args("MeanSquareD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MeanSquareD",1,"double const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MeanSquareD",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MeanSquareD",1,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (double)MeanSquareD((double const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTComplex_real_set(lua_State* L) {
  int SWIG_arg = 0;
  FFTComplex *arg1 = (FFTComplex *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("FFTComplex::real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTComplex::real",1,"FFTComplex *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FFTComplex::real",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTComplex,0))){
    SWIG_fail_ptr("FFTComplex_real_set",1,SWIGTYPE_p_FFTComplex);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->real = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTComplex_real_get(lua_State* L) {
  int SWIG_arg = 0;
  FFTComplex *arg1 = (FFTComplex *) 0 ;
  float result;
  
  SWIG_check_num_args("FFTComplex::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTComplex::real",1,"FFTComplex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTComplex,0))){
    SWIG_fail_ptr("FFTComplex_real_get",1,SWIGTYPE_p_FFTComplex);
  }
  
  result = (float) ((arg1)->real);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTComplex_imag_set(lua_State* L) {
  int SWIG_arg = 0;
  FFTComplex *arg1 = (FFTComplex *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("FFTComplex::imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTComplex::imag",1,"FFTComplex *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FFTComplex::imag",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTComplex,0))){
    SWIG_fail_ptr("FFTComplex_imag_set",1,SWIGTYPE_p_FFTComplex);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->imag = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTComplex_imag_get(lua_State* L) {
  int SWIG_arg = 0;
  FFTComplex *arg1 = (FFTComplex *) 0 ;
  float result;
  
  SWIG_check_num_args("FFTComplex::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTComplex::imag",1,"FFTComplex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTComplex,0))){
    SWIG_fail_ptr("FFTComplex_imag_get",1,SWIGTYPE_p_FFTComplex);
  }
  
  result = (float) ((arg1)->imag);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTComplex(lua_State* L) {
  int SWIG_arg = 0;
  FFTComplex *result = 0 ;
  
  SWIG_check_num_args("FFTComplex::FFTComplex",0,0)
  result = (FFTComplex *)new FFTComplex();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FFTComplex,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FFTComplex(void *obj) {
FFTComplex *arg1 = (FFTComplex *) obj;
delete arg1;
}
static int _proxy__wrap_new_FFTComplex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FFTComplex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FFTComplex_attributes[] = {
    { "real", _wrap_FFTComplex_real_get, _wrap_FFTComplex_real_set },
    { "imag", _wrap_FFTComplex_imag_get, _wrap_FFTComplex_imag_set },
    {0,0,0}
};
static swig_lua_method swig_FFTComplex_methods[]= {
    {0,0}
};
static swig_lua_method swig_FFTComplex_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FFTComplex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FFTComplex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FFTComplex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FFTComplex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FFTComplex_Sf_SwigStatic = {
    "FFTComplex",
    swig_FFTComplex_Sf_SwigStatic_methods,
    swig_FFTComplex_Sf_SwigStatic_attributes,
    swig_FFTComplex_Sf_SwigStatic_constants,
    swig_FFTComplex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FFTComplex_bases[] = {0};
static const char *swig_FFTComplex_base_names[] = {0};
static swig_lua_class _wrap_class_FFTComplex = { "FFTComplex", "FFTComplex", &SWIGTYPE_p_FFTComplex,_proxy__wrap_new_FFTComplex, swig_delete_FFTComplex, swig_FFTComplex_methods, swig_FFTComplex_attributes, &swig_FFTComplex_Sf_SwigStatic, swig_FFTComplex_meta, swig_FFTComplex_bases, swig_FFTComplex_base_names };

static int _wrap_FFTSplitComplex_realp_set(lua_State* L) {
  int SWIG_arg = 0;
  FFTSplitComplex *arg1 = (FFTSplitComplex *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("FFTSplitComplex::realp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTSplitComplex::realp",1,"FFTSplitComplex *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FFTSplitComplex::realp",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTSplitComplex,0))){
    SWIG_fail_ptr("FFTSplitComplex_realp_set",1,SWIGTYPE_p_FFTSplitComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FFTSplitComplex_realp_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->realp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTSplitComplex_realp_get(lua_State* L) {
  int SWIG_arg = 0;
  FFTSplitComplex *arg1 = (FFTSplitComplex *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("FFTSplitComplex::realp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTSplitComplex::realp",1,"FFTSplitComplex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTSplitComplex,0))){
    SWIG_fail_ptr("FFTSplitComplex_realp_get",1,SWIGTYPE_p_FFTSplitComplex);
  }
  
  result = (float *) ((arg1)->realp);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTSplitComplex_imagp_set(lua_State* L) {
  int SWIG_arg = 0;
  FFTSplitComplex *arg1 = (FFTSplitComplex *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("FFTSplitComplex::imagp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTSplitComplex::imagp",1,"FFTSplitComplex *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FFTSplitComplex::imagp",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTSplitComplex,0))){
    SWIG_fail_ptr("FFTSplitComplex_imagp_set",1,SWIGTYPE_p_FFTSplitComplex);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FFTSplitComplex_imagp_set",2,SWIGTYPE_p_float);
  }
  
  if (arg1) (arg1)->imagp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTSplitComplex_imagp_get(lua_State* L) {
  int SWIG_arg = 0;
  FFTSplitComplex *arg1 = (FFTSplitComplex *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("FFTSplitComplex::imagp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTSplitComplex::imagp",1,"FFTSplitComplex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTSplitComplex,0))){
    SWIG_fail_ptr("FFTSplitComplex_imagp_get",1,SWIGTYPE_p_FFTSplitComplex);
  }
  
  result = (float *) ((arg1)->imagp);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTSplitComplex(lua_State* L) {
  int SWIG_arg = 0;
  FFTSplitComplex *result = 0 ;
  
  SWIG_check_num_args("FFTSplitComplex::FFTSplitComplex",0,0)
  result = (FFTSplitComplex *)new FFTSplitComplex();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FFTSplitComplex,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FFTSplitComplex(void *obj) {
FFTSplitComplex *arg1 = (FFTSplitComplex *) obj;
delete arg1;
}
static int _proxy__wrap_new_FFTSplitComplex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FFTSplitComplex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FFTSplitComplex_attributes[] = {
    { "realp", _wrap_FFTSplitComplex_realp_get, _wrap_FFTSplitComplex_realp_set },
    { "imagp", _wrap_FFTSplitComplex_imagp_get, _wrap_FFTSplitComplex_imagp_set },
    {0,0,0}
};
static swig_lua_method swig_FFTSplitComplex_methods[]= {
    {0,0}
};
static swig_lua_method swig_FFTSplitComplex_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FFTSplitComplex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FFTSplitComplex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FFTSplitComplex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FFTSplitComplex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FFTSplitComplex_Sf_SwigStatic = {
    "FFTSplitComplex",
    swig_FFTSplitComplex_Sf_SwigStatic_methods,
    swig_FFTSplitComplex_Sf_SwigStatic_attributes,
    swig_FFTSplitComplex_Sf_SwigStatic_constants,
    swig_FFTSplitComplex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FFTSplitComplex_bases[] = {0};
static const char *swig_FFTSplitComplex_base_names[] = {0};
static swig_lua_class _wrap_class_FFTSplitComplex = { "FFTSplitComplex", "FFTSplitComplex", &SWIGTYPE_p_FFTSplitComplex,_proxy__wrap_new_FFTSplitComplex, swig_delete_FFTSplitComplex, swig_FFTSplitComplex_methods, swig_FFTSplitComplex_attributes, &swig_FFTSplitComplex_Sf_SwigStatic, swig_FFTSplitComplex_meta, swig_FFTSplitComplex_bases, swig_FFTSplitComplex_base_names };

static int _wrap_FFTComplexD_real_set(lua_State* L) {
  int SWIG_arg = 0;
  FFTComplexD *arg1 = (FFTComplexD *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("FFTComplexD::real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTComplexD::real",1,"FFTComplexD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FFTComplexD::real",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTComplexD,0))){
    SWIG_fail_ptr("FFTComplexD_real_set",1,SWIGTYPE_p_FFTComplexD);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->real = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTComplexD_real_get(lua_State* L) {
  int SWIG_arg = 0;
  FFTComplexD *arg1 = (FFTComplexD *) 0 ;
  double result;
  
  SWIG_check_num_args("FFTComplexD::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTComplexD::real",1,"FFTComplexD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTComplexD,0))){
    SWIG_fail_ptr("FFTComplexD_real_get",1,SWIGTYPE_p_FFTComplexD);
  }
  
  result = (double) ((arg1)->real);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTComplexD_imag_set(lua_State* L) {
  int SWIG_arg = 0;
  FFTComplexD *arg1 = (FFTComplexD *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("FFTComplexD::imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTComplexD::imag",1,"FFTComplexD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FFTComplexD::imag",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTComplexD,0))){
    SWIG_fail_ptr("FFTComplexD_imag_set",1,SWIGTYPE_p_FFTComplexD);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->imag = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTComplexD_imag_get(lua_State* L) {
  int SWIG_arg = 0;
  FFTComplexD *arg1 = (FFTComplexD *) 0 ;
  double result;
  
  SWIG_check_num_args("FFTComplexD::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTComplexD::imag",1,"FFTComplexD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTComplexD,0))){
    SWIG_fail_ptr("FFTComplexD_imag_get",1,SWIGTYPE_p_FFTComplexD);
  }
  
  result = (double) ((arg1)->imag);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTComplexD(lua_State* L) {
  int SWIG_arg = 0;
  FFTComplexD *result = 0 ;
  
  SWIG_check_num_args("FFTComplexD::FFTComplexD",0,0)
  result = (FFTComplexD *)new FFTComplexD();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FFTComplexD,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FFTComplexD(void *obj) {
FFTComplexD *arg1 = (FFTComplexD *) obj;
delete arg1;
}
static int _proxy__wrap_new_FFTComplexD(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FFTComplexD);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FFTComplexD_attributes[] = {
    { "real", _wrap_FFTComplexD_real_get, _wrap_FFTComplexD_real_set },
    { "imag", _wrap_FFTComplexD_imag_get, _wrap_FFTComplexD_imag_set },
    {0,0,0}
};
static swig_lua_method swig_FFTComplexD_methods[]= {
    {0,0}
};
static swig_lua_method swig_FFTComplexD_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FFTComplexD_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FFTComplexD_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FFTComplexD_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FFTComplexD_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FFTComplexD_Sf_SwigStatic = {
    "FFTComplexD",
    swig_FFTComplexD_Sf_SwigStatic_methods,
    swig_FFTComplexD_Sf_SwigStatic_attributes,
    swig_FFTComplexD_Sf_SwigStatic_constants,
    swig_FFTComplexD_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FFTComplexD_bases[] = {0};
static const char *swig_FFTComplexD_base_names[] = {0};
static swig_lua_class _wrap_class_FFTComplexD = { "FFTComplexD", "FFTComplexD", &SWIGTYPE_p_FFTComplexD,_proxy__wrap_new_FFTComplexD, swig_delete_FFTComplexD, swig_FFTComplexD_methods, swig_FFTComplexD_attributes, &swig_FFTComplexD_Sf_SwigStatic, swig_FFTComplexD_meta, swig_FFTComplexD_bases, swig_FFTComplexD_base_names };

static int _wrap_FFTSplitComplexD_realp_set(lua_State* L) {
  int SWIG_arg = 0;
  FFTSplitComplexD *arg1 = (FFTSplitComplexD *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("FFTSplitComplexD::realp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTSplitComplexD::realp",1,"FFTSplitComplexD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FFTSplitComplexD::realp",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTSplitComplexD,0))){
    SWIG_fail_ptr("FFTSplitComplexD_realp_set",1,SWIGTYPE_p_FFTSplitComplexD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FFTSplitComplexD_realp_set",2,SWIGTYPE_p_double);
  }
  
  if (arg1) (arg1)->realp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTSplitComplexD_realp_get(lua_State* L) {
  int SWIG_arg = 0;
  FFTSplitComplexD *arg1 = (FFTSplitComplexD *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("FFTSplitComplexD::realp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTSplitComplexD::realp",1,"FFTSplitComplexD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTSplitComplexD,0))){
    SWIG_fail_ptr("FFTSplitComplexD_realp_get",1,SWIGTYPE_p_FFTSplitComplexD);
  }
  
  result = (double *) ((arg1)->realp);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTSplitComplexD_imagp_set(lua_State* L) {
  int SWIG_arg = 0;
  FFTSplitComplexD *arg1 = (FFTSplitComplexD *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("FFTSplitComplexD::imagp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTSplitComplexD::imagp",1,"FFTSplitComplexD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FFTSplitComplexD::imagp",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTSplitComplexD,0))){
    SWIG_fail_ptr("FFTSplitComplexD_imagp_set",1,SWIGTYPE_p_FFTSplitComplexD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FFTSplitComplexD_imagp_set",2,SWIGTYPE_p_double);
  }
  
  if (arg1) (arg1)->imagp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTSplitComplexD_imagp_get(lua_State* L) {
  int SWIG_arg = 0;
  FFTSplitComplexD *arg1 = (FFTSplitComplexD *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("FFTSplitComplexD::imagp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTSplitComplexD::imagp",1,"FFTSplitComplexD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTSplitComplexD,0))){
    SWIG_fail_ptr("FFTSplitComplexD_imagp_get",1,SWIGTYPE_p_FFTSplitComplexD);
  }
  
  result = (double *) ((arg1)->imagp);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FFTSplitComplexD(lua_State* L) {
  int SWIG_arg = 0;
  FFTSplitComplexD *result = 0 ;
  
  SWIG_check_num_args("FFTSplitComplexD::FFTSplitComplexD",0,0)
  result = (FFTSplitComplexD *)new FFTSplitComplexD();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FFTSplitComplexD,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FFTSplitComplexD(void *obj) {
FFTSplitComplexD *arg1 = (FFTSplitComplexD *) obj;
delete arg1;
}
static int _proxy__wrap_new_FFTSplitComplexD(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FFTSplitComplexD);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FFTSplitComplexD_attributes[] = {
    { "realp", _wrap_FFTSplitComplexD_realp_get, _wrap_FFTSplitComplexD_realp_set },
    { "imagp", _wrap_FFTSplitComplexD_imagp_get, _wrap_FFTSplitComplexD_imagp_set },
    {0,0,0}
};
static swig_lua_method swig_FFTSplitComplexD_methods[]= {
    {0,0}
};
static swig_lua_method swig_FFTSplitComplexD_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FFTSplitComplexD_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FFTSplitComplexD_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FFTSplitComplexD_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FFTSplitComplexD_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FFTSplitComplexD_Sf_SwigStatic = {
    "FFTSplitComplexD",
    swig_FFTSplitComplexD_Sf_SwigStatic_methods,
    swig_FFTSplitComplexD_Sf_SwigStatic_attributes,
    swig_FFTSplitComplexD_Sf_SwigStatic_constants,
    swig_FFTSplitComplexD_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FFTSplitComplexD_bases[] = {0};
static const char *swig_FFTSplitComplexD_base_names[] = {0};
static swig_lua_class _wrap_class_FFTSplitComplexD = { "FFTSplitComplexD", "FFTSplitComplexD", &SWIGTYPE_p_FFTSplitComplexD,_proxy__wrap_new_FFTSplitComplexD, swig_delete_FFTSplitComplexD, swig_FFTSplitComplexD_methods, swig_FFTSplitComplexD_attributes, &swig_FFTSplitComplexD_Sf_SwigStatic, swig_FFTSplitComplexD_meta, swig_FFTSplitComplexD_bases, swig_FFTSplitComplexD_base_names };

static int _wrap_FFTInit(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  FFTConfig *result = 0 ;
  
  SWIG_check_num_args("FFTInit",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("FFTInit",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (FFTConfig *)FFTInit(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FFTConfig,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTInitD(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  FFTConfigD *result = 0 ;
  
  SWIG_check_num_args("FFTInitD",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("FFTInitD",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (FFTConfigD *)FFTInitD(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FFTConfigD,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTFree(lua_State* L) {
  int SWIG_arg = 0;
  FFTConfig *arg1 = (FFTConfig *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("FFTFree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTFree",1,"FFTConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTConfig,0))){
    SWIG_fail_ptr("FFTFree",1,SWIGTYPE_p_FFTConfig);
  }
  
  result = (Error_t)FFTFree(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTFreeD(lua_State* L) {
  int SWIG_arg = 0;
  FFTConfigD *arg1 = (FFTConfigD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("FFTFreeD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTFreeD",1,"FFTConfigD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTConfigD,0))){
    SWIG_fail_ptr("FFTFreeD",1,SWIGTYPE_p_FFTConfigD);
  }
  
  result = (Error_t)FFTFreeD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFT_R2C(lua_State* L) {
  int SWIG_arg = 0;
  FFTConfig *arg1 = (FFTConfig *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("FFT_R2C",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFT_R2C",1,"FFTConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FFT_R2C",2,"float const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("FFT_R2C",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("FFT_R2C",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTConfig,0))){
    SWIG_fail_ptr("FFT_R2C",1,SWIGTYPE_p_FFTConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FFT_R2C",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FFT_R2C",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FFT_R2C",4,SWIGTYPE_p_float);
  }
  
  result = (Error_t)FFT_R2C(arg1,(float const *)arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFT_R2CD(lua_State* L) {
  int SWIG_arg = 0;
  FFTConfigD *arg1 = (FFTConfigD *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("FFT_R2CD",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFT_R2CD",1,"FFTConfigD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FFT_R2CD",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("FFT_R2CD",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("FFT_R2CD",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTConfigD,0))){
    SWIG_fail_ptr("FFT_R2CD",1,SWIGTYPE_p_FFTConfigD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFT_R2CD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFT_R2CD",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFT_R2CD",4,SWIGTYPE_p_double);
  }
  
  result = (Error_t)FFT_R2CD(arg1,(double const *)arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFT_IR_R2C(lua_State* L) {
  int SWIG_arg = 0;
  FFTConfig *arg1 = (FFTConfig *) 0 ;
  float *arg2 = (float *) 0 ;
  FFTSplitComplex arg3 ;
  FFTSplitComplex *argp3 ;
  Error_t result;
  
  SWIG_check_num_args("FFT_IR_R2C",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFT_IR_R2C",1,"FFTConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FFT_IR_R2C",2,"float const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FFT_IR_R2C",3,"FFTSplitComplex");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTConfig,0))){
    SWIG_fail_ptr("FFT_IR_R2C",1,SWIGTYPE_p_FFTConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FFT_IR_R2C",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_FFTSplitComplex,0))){
    SWIG_fail_ptr("FFT_IR_R2C",3,SWIGTYPE_p_FFTSplitComplex);
  }
  arg3 = *argp3;
  
  result = (Error_t)FFT_IR_R2C(arg1,(float const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFT_IR_R2CD(lua_State* L) {
  int SWIG_arg = 0;
  FFTConfigD *arg1 = (FFTConfigD *) 0 ;
  double *arg2 = (double *) 0 ;
  FFTSplitComplexD arg3 ;
  FFTSplitComplexD *argp3 ;
  Error_t result;
  
  SWIG_check_num_args("FFT_IR_R2CD",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFT_IR_R2CD",1,"FFTConfigD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FFT_IR_R2CD",2,"double const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FFT_IR_R2CD",3,"FFTSplitComplexD");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTConfigD,0))){
    SWIG_fail_ptr("FFT_IR_R2CD",1,SWIGTYPE_p_FFTConfigD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFT_IR_R2CD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_FFTSplitComplexD,0))){
    SWIG_fail_ptr("FFT_IR_R2CD",3,SWIGTYPE_p_FFTSplitComplexD);
  }
  arg3 = *argp3;
  
  result = (Error_t)FFT_IR_R2CD(arg1,(double const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFFT_C2R(lua_State* L) {
  int SWIG_arg = 0;
  FFTConfig *arg1 = (FFTConfig *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("IFFT_C2R",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IFFT_C2R",1,"FFTConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("IFFT_C2R",2,"float const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("IFFT_C2R",3,"float const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("IFFT_C2R",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTConfig,0))){
    SWIG_fail_ptr("IFFT_C2R",1,SWIGTYPE_p_FFTConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("IFFT_C2R",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("IFFT_C2R",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("IFFT_C2R",4,SWIGTYPE_p_float);
  }
  
  result = (Error_t)IFFT_C2R(arg1,(float const *)arg2,(float const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IFFT_C2RD(lua_State* L) {
  int SWIG_arg = 0;
  FFTConfigD *arg1 = (FFTConfigD *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("IFFT_C2RD",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("IFFT_C2RD",1,"FFTConfigD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("IFFT_C2RD",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("IFFT_C2RD",3,"double const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("IFFT_C2RD",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTConfigD,0))){
    SWIG_fail_ptr("IFFT_C2RD",1,SWIGTYPE_p_FFTConfigD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IFFT_C2RD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IFFT_C2RD",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("IFFT_C2RD",4,SWIGTYPE_p_double);
  }
  
  result = (Error_t)IFFT_C2RD(arg1,(double const *)arg2,(double const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolve(lua_State* L) {
  int SWIG_arg = 0;
  FFTConfig *arg1 = (FFTConfig *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int arg3 ;
  float *arg4 = (float *) 0 ;
  unsigned int arg5 ;
  float *arg6 = (float *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("FFTConvolve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTConvolve",1,"FFTConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FFTConvolve",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FFTConvolve",3,"unsigned int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("FFTConvolve",4,"float *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("FFTConvolve",5,"unsigned int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("FFTConvolve",6,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTConfig,0))){
    SWIG_fail_ptr("FFTConvolve",1,SWIGTYPE_p_FFTConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FFTConvolve",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FFTConvolve",4,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FFTConvolve",6,SWIGTYPE_p_float);
  }
  
  result = (Error_t)FFTConvolve(arg1,arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTConvolveD(lua_State* L) {
  int SWIG_arg = 0;
  FFTConfigD *arg1 = (FFTConfigD *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  double *arg4 = (double *) 0 ;
  unsigned int arg5 ;
  double *arg6 = (double *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("FFTConvolveD",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTConvolveD",1,"FFTConfigD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FFTConvolveD",2,"double const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FFTConvolveD",3,"unsigned int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("FFTConvolveD",4,"double const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("FFTConvolveD",5,"unsigned int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("FFTConvolveD",6,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTConfigD,0))){
    SWIG_fail_ptr("FFTConvolveD",1,SWIGTYPE_p_FFTConfigD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFTConvolveD",2,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFTConvolveD",4,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative");
  arg5 = (unsigned int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFTConvolveD",6,SWIGTYPE_p_double);
  }
  
  result = (Error_t)FFTConvolveD(arg1,(double const *)arg2,arg3,(double const *)arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTFilterConvolve(lua_State* L) {
  int SWIG_arg = 0;
  FFTConfig *arg1 = (FFTConfig *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int arg3 ;
  FFTSplitComplex arg4 ;
  float *arg5 = (float *) 0 ;
  FFTSplitComplex *argp4 ;
  Error_t result;
  
  SWIG_check_num_args("FFTFilterConvolve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTFilterConvolve",1,"FFTConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FFTFilterConvolve",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FFTFilterConvolve",3,"unsigned int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FFTFilterConvolve",4,"FFTSplitComplex");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("FFTFilterConvolve",5,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTConfig,0))){
    SWIG_fail_ptr("FFTFilterConvolve",1,SWIGTYPE_p_FFTConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FFTFilterConvolve",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_FFTSplitComplex,0))){
    SWIG_fail_ptr("FFTFilterConvolve",4,SWIGTYPE_p_FFTSplitComplex);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FFTFilterConvolve",5,SWIGTYPE_p_float);
  }
  
  result = (Error_t)FFTFilterConvolve(arg1,(float const *)arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FFTFilterConvolveD(lua_State* L) {
  int SWIG_arg = 0;
  FFTConfigD *arg1 = (FFTConfigD *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  FFTSplitComplexD arg4 ;
  double *arg5 = (double *) 0 ;
  FFTSplitComplexD *argp4 ;
  Error_t result;
  
  SWIG_check_num_args("FFTFilterConvolveD",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FFTFilterConvolveD",1,"FFTConfigD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FFTFilterConvolveD",2,"double const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FFTFilterConvolveD",3,"unsigned int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FFTFilterConvolveD",4,"FFTSplitComplexD");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("FFTFilterConvolveD",5,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FFTConfigD,0))){
    SWIG_fail_ptr("FFTFilterConvolveD",1,SWIGTYPE_p_FFTConfigD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFTFilterConvolveD",2,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_FFTSplitComplexD,0))){
    SWIG_fail_ptr("FFTFilterConvolveD",4,SWIGTYPE_p_FFTSplitComplexD);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FFTFilterConvolveD",5,SWIGTYPE_p_double);
  }
  
  result = (Error_t)FFTFilterConvolveD(arg1,(double const *)arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRFilterInit(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  unsigned int arg2 ;
  ConvolutionMode_t arg3 ;
  FIRFilter *result = 0 ;
  
  SWIG_check_num_args("FIRFilterInit",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FIRFilterInit",1,"float const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FIRFilterInit",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FIRFilterInit",3,"ConvolutionMode_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FIRFilterInit",1,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (ConvolutionMode_t)(int)lua_tonumber(L, 3);
  result = (FIRFilter *)FIRFilterInit((float const *)arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FIRFilter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRFilterInitD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  ConvolutionMode_t arg3 ;
  FIRFilterD *result = 0 ;
  
  SWIG_check_num_args("FIRFilterInitD",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FIRFilterInitD",1,"double const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FIRFilterInitD",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FIRFilterInitD",3,"ConvolutionMode_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FIRFilterInitD",1,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (ConvolutionMode_t)(int)lua_tonumber(L, 3);
  result = (FIRFilterD *)FIRFilterInitD((double const *)arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FIRFilterD,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRFilterFree(lua_State* L) {
  int SWIG_arg = 0;
  FIRFilter *arg1 = (FIRFilter *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("FIRFilterFree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FIRFilterFree",1,"FIRFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FIRFilter,0))){
    SWIG_fail_ptr("FIRFilterFree",1,SWIGTYPE_p_FIRFilter);
  }
  
  result = (Error_t)FIRFilterFree(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRFilterFreeD(lua_State* L) {
  int SWIG_arg = 0;
  FIRFilterD *arg1 = (FIRFilterD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("FIRFilterFreeD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FIRFilterFreeD",1,"FIRFilterD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FIRFilterD,0))){
    SWIG_fail_ptr("FIRFilterFreeD",1,SWIGTYPE_p_FIRFilterD);
  }
  
  result = (Error_t)FIRFilterFreeD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRFilterFlush(lua_State* L) {
  int SWIG_arg = 0;
  FIRFilter *arg1 = (FIRFilter *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("FIRFilterFlush",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FIRFilterFlush",1,"FIRFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FIRFilter,0))){
    SWIG_fail_ptr("FIRFilterFlush",1,SWIGTYPE_p_FIRFilter);
  }
  
  result = (Error_t)FIRFilterFlush(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRFilterFlushD(lua_State* L) {
  int SWIG_arg = 0;
  FIRFilterD *arg1 = (FIRFilterD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("FIRFilterFlushD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FIRFilterFlushD",1,"FIRFilterD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FIRFilterD,0))){
    SWIG_fail_ptr("FIRFilterFlushD",1,SWIGTYPE_p_FIRFilterD);
  }
  
  result = (Error_t)FIRFilterFlushD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRFilterProcess(lua_State* L) {
  int SWIG_arg = 0;
  FIRFilter *arg1 = (FIRFilter *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("FIRFilterProcess",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FIRFilterProcess",1,"FIRFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FIRFilterProcess",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("FIRFilterProcess",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FIRFilterProcess",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FIRFilter,0))){
    SWIG_fail_ptr("FIRFilterProcess",1,SWIGTYPE_p_FIRFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FIRFilterProcess",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FIRFilterProcess",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)FIRFilterProcess(arg1,arg2,(float const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRFilterProcessD(lua_State* L) {
  int SWIG_arg = 0;
  FIRFilterD *arg1 = (FIRFilterD *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("FIRFilterProcessD",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FIRFilterProcessD",1,"FIRFilterD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FIRFilterProcessD",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("FIRFilterProcessD",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FIRFilterProcessD",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FIRFilterD,0))){
    SWIG_fail_ptr("FIRFilterProcessD",1,SWIGTYPE_p_FIRFilterD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FIRFilterProcessD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FIRFilterProcessD",3,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)FIRFilterProcessD(arg1,arg2,(double const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRFilterUpdateKernel(lua_State* L) {
  int SWIG_arg = 0;
  FIRFilter *arg1 = (FIRFilter *) 0 ;
  float *arg2 = (float *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("FIRFilterUpdateKernel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FIRFilterUpdateKernel",1,"FIRFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FIRFilterUpdateKernel",2,"float const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FIRFilter,0))){
    SWIG_fail_ptr("FIRFilterUpdateKernel",1,SWIGTYPE_p_FIRFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FIRFilterUpdateKernel",2,SWIGTYPE_p_float);
  }
  
  result = (Error_t)FIRFilterUpdateKernel(arg1,(float const *)arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FIRFilterUpdateKernelD(lua_State* L) {
  int SWIG_arg = 0;
  FIRFilterD *arg1 = (FIRFilterD *) 0 ;
  double *arg2 = (double *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("FIRFilterUpdateKernelD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FIRFilterUpdateKernelD",1,"FIRFilterD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("FIRFilterUpdateKernelD",2,"double const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FIRFilterD,0))){
    SWIG_fail_ptr("FIRFilterUpdateKernelD",1,SWIGTYPE_p_FIRFilterD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FIRFilterUpdateKernelD",2,SWIGTYPE_p_double);
  }
  
  result = (Error_t)FIRFilterUpdateKernelD(arg1,(double const *)arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BOLTZMANS_CONSTANT_get(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("BOLTZMANS_CONSTANT",0,0)
  result = (float)(float)BOLTZMANS_CONSTANT;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("Q",0,0)
  result = (float)(float)Q;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LadderFilterInit(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  LadderFilter *result = 0 ;
  
  SWIG_check_num_args("LadderFilterInit",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("LadderFilterInit",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (LadderFilter *)LadderFilterInit(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LadderFilter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LadderFilterFree(lua_State* L) {
  int SWIG_arg = 0;
  LadderFilter *arg1 = (LadderFilter *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("LadderFilterFree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LadderFilterFree",1,"LadderFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LadderFilter,0))){
    SWIG_fail_ptr("LadderFilterFree",1,SWIGTYPE_p_LadderFilter);
  }
  
  result = (Error_t)LadderFilterFree(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LadderFilterFlush(lua_State* L) {
  int SWIG_arg = 0;
  LadderFilter *arg1 = (LadderFilter *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("LadderFilterFlush",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LadderFilterFlush",1,"LadderFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LadderFilter,0))){
    SWIG_fail_ptr("LadderFilterFlush",1,SWIGTYPE_p_LadderFilter);
  }
  
  result = (Error_t)LadderFilterFlush(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LadderFilterProcess(lua_State* L) {
  int SWIG_arg = 0;
  LadderFilter *arg1 = (LadderFilter *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("LadderFilterProcess",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LadderFilterProcess",1,"LadderFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LadderFilterProcess",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LadderFilterProcess",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("LadderFilterProcess",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LadderFilter,0))){
    SWIG_fail_ptr("LadderFilterProcess",1,SWIGTYPE_p_LadderFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LadderFilterProcess",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LadderFilterProcess",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)LadderFilterProcess(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LadderFilterSetCutoff(lua_State* L) {
  int SWIG_arg = 0;
  LadderFilter *arg1 = (LadderFilter *) 0 ;
  float arg2 ;
  Error_t result;
  
  SWIG_check_num_args("LadderFilterSetCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LadderFilterSetCutoff",1,"LadderFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LadderFilterSetCutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LadderFilter,0))){
    SWIG_fail_ptr("LadderFilterSetCutoff",1,SWIGTYPE_p_LadderFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (Error_t)LadderFilterSetCutoff(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LadderFilterSetResonance(lua_State* L) {
  int SWIG_arg = 0;
  LadderFilter *arg1 = (LadderFilter *) 0 ;
  float arg2 ;
  Error_t result;
  
  SWIG_check_num_args("LadderFilterSetResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LadderFilterSetResonance",1,"LadderFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LadderFilterSetResonance",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LadderFilter,0))){
    SWIG_fail_ptr("LadderFilterSetResonance",1,SWIGTYPE_p_LadderFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (Error_t)LadderFilterSetResonance(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LadderFilterSetTemperature(lua_State* L) {
  int SWIG_arg = 0;
  LadderFilter *arg1 = (LadderFilter *) 0 ;
  float arg2 ;
  Error_t result;
  
  SWIG_check_num_args("LadderFilterSetTemperature",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LadderFilterSetTemperature",1,"LadderFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LadderFilterSetTemperature",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LadderFilter,0))){
    SWIG_fail_ptr("LadderFilterSetTemperature",1,SWIGTYPE_p_LadderFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (Error_t)LadderFilterSetTemperature(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LRFilterInit(lua_State* L) {
  int SWIG_arg = 0;
  Filter_t arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  LRFilter *result = 0 ;
  
  SWIG_check_num_args("LRFilterInit",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("LRFilterInit",1,"Filter_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LRFilterInit",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("LRFilterInit",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("LRFilterInit",4,"float");
  arg1 = (Filter_t)(int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (LRFilter *)LRFilterInit(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LRFilter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LRFilterInitD(lua_State* L) {
  int SWIG_arg = 0;
  Filter_t arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  LRFilterD *result = 0 ;
  
  SWIG_check_num_args("LRFilterInitD",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("LRFilterInitD",1,"Filter_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LRFilterInitD",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("LRFilterInitD",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("LRFilterInitD",4,"double");
  arg1 = (Filter_t)(int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (LRFilterD *)LRFilterInitD(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LRFilterD,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LRFilterFree(lua_State* L) {
  int SWIG_arg = 0;
  LRFilter *arg1 = (LRFilter *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("LRFilterFree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LRFilterFree",1,"LRFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LRFilter,0))){
    SWIG_fail_ptr("LRFilterFree",1,SWIGTYPE_p_LRFilter);
  }
  
  result = (Error_t)LRFilterFree(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LRFilterFreeD(lua_State* L) {
  int SWIG_arg = 0;
  LRFilterD *arg1 = (LRFilterD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("LRFilterFreeD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LRFilterFreeD",1,"LRFilterD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LRFilterD,0))){
    SWIG_fail_ptr("LRFilterFreeD",1,SWIGTYPE_p_LRFilterD);
  }
  
  result = (Error_t)LRFilterFreeD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LRFilterFlush(lua_State* L) {
  int SWIG_arg = 0;
  LRFilter *arg1 = (LRFilter *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("LRFilterFlush",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LRFilterFlush",1,"LRFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LRFilter,0))){
    SWIG_fail_ptr("LRFilterFlush",1,SWIGTYPE_p_LRFilter);
  }
  
  result = (Error_t)LRFilterFlush(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LRFilterFlushD(lua_State* L) {
  int SWIG_arg = 0;
  LRFilterD *arg1 = (LRFilterD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("LRFilterFlushD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LRFilterFlushD",1,"LRFilterD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LRFilterD,0))){
    SWIG_fail_ptr("LRFilterFlushD",1,SWIGTYPE_p_LRFilterD);
  }
  
  result = (Error_t)LRFilterFlushD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LRFilterSetParams(lua_State* L) {
  int SWIG_arg = 0;
  LRFilter *arg1 = (LRFilter *) 0 ;
  Filter_t arg2 ;
  float arg3 ;
  float arg4 ;
  Error_t result;
  
  SWIG_check_num_args("LRFilterSetParams",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LRFilterSetParams",1,"LRFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LRFilterSetParams",2,"Filter_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("LRFilterSetParams",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("LRFilterSetParams",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LRFilter,0))){
    SWIG_fail_ptr("LRFilterSetParams",1,SWIGTYPE_p_LRFilter);
  }
  
  arg2 = (Filter_t)(int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (Error_t)LRFilterSetParams(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LRFilterSetParamsD(lua_State* L) {
  int SWIG_arg = 0;
  LRFilterD *arg1 = (LRFilterD *) 0 ;
  Filter_t arg2 ;
  double arg3 ;
  double arg4 ;
  Error_t result;
  
  SWIG_check_num_args("LRFilterSetParamsD",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LRFilterSetParamsD",1,"LRFilterD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("LRFilterSetParamsD",2,"Filter_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("LRFilterSetParamsD",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("LRFilterSetParamsD",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LRFilterD,0))){
    SWIG_fail_ptr("LRFilterSetParamsD",1,SWIGTYPE_p_LRFilterD);
  }
  
  arg2 = (Filter_t)(int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (Error_t)LRFilterSetParamsD(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LRFilterProcess(lua_State* L) {
  int SWIG_arg = 0;
  LRFilter *arg1 = (LRFilter *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("LRFilterProcess",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LRFilterProcess",1,"LRFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LRFilterProcess",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LRFilterProcess",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("LRFilterProcess",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LRFilter,0))){
    SWIG_fail_ptr("LRFilterProcess",1,SWIGTYPE_p_LRFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LRFilterProcess",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("LRFilterProcess",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)LRFilterProcess(arg1,arg2,(float const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LRFilterProcessD(lua_State* L) {
  int SWIG_arg = 0;
  LRFilterD *arg1 = (LRFilterD *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("LRFilterProcessD",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("LRFilterProcessD",1,"LRFilterD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("LRFilterProcessD",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("LRFilterProcessD",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("LRFilterProcessD",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LRFilterD,0))){
    SWIG_fail_ptr("LRFilterProcessD",1,SWIGTYPE_p_LRFilterD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("LRFilterProcessD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("LRFilterProcessD",3,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)LRFilterProcessD(arg1,arg2,(double const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_phase_correlation(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int arg3 ;
  float result;
  
  SWIG_check_num_args("phase_correlation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("phase_correlation",1,"float *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("phase_correlation",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("phase_correlation",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("phase_correlation",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("phase_correlation",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (float)phase_correlation(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_phase_correlationD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  double result;
  
  SWIG_check_num_args("phase_correlationD",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("phase_correlationD",1,"double *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("phase_correlationD",2,"double *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("phase_correlationD",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("phase_correlationD",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("phase_correlationD",2,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (double)phase_correlationD(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_balance(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  unsigned int arg3 ;
  float result;
  
  SWIG_check_num_args("balance",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("balance",1,"float *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("balance",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("balance",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("balance",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("balance",2,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (float)balance(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_balanceD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  unsigned int arg3 ;
  double result;
  
  SWIG_check_num_args("balanceD",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("balanceD",1,"double *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("balanceD",2,"double *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("balanceD",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("balanceD",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("balanceD",2,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (double)balanceD(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vu_peak(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  unsigned int arg2 ;
  MeterScale arg3 ;
  float result;
  
  SWIG_check_num_args("vu_peak",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("vu_peak",1,"float *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("vu_peak",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("vu_peak",3,"MeterScale");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("vu_peak",1,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (MeterScale)(int)lua_tonumber(L, 3);
  result = (float)vu_peak(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vu_peakD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  unsigned int arg2 ;
  MeterScale arg3 ;
  double result;
  
  SWIG_check_num_args("vu_peakD",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("vu_peakD",1,"double *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("vu_peakD",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("vu_peakD",3,"MeterScale");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("vu_peakD",1,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (MeterScale)(int)lua_tonumber(L, 3);
  result = (double)vu_peakD(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_midiNoteToFrequency(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  float result;
  
  SWIG_check_num_args("midiNoteToFrequency",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("midiNoteToFrequency",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (float)midiNoteToFrequency(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_frequencyToMidiNote(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  unsigned int result;
  
  SWIG_check_num_args("frequencyToMidiNote",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("frequencyToMidiNote",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (unsigned int)frequencyToMidiNote(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultibandFilterInit(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  MultibandFilter *result = 0 ;
  
  SWIG_check_num_args("MultibandFilterInit",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("MultibandFilterInit",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MultibandFilterInit",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MultibandFilterInit",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (MultibandFilter *)MultibandFilterInit(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MultibandFilter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultibandFilterInitD(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  MultibandFilterD *result = 0 ;
  
  SWIG_check_num_args("MultibandFilterInitD",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("MultibandFilterInitD",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MultibandFilterInitD",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MultibandFilterInitD",3,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (MultibandFilterD *)MultibandFilterInitD(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_MultibandFilterD,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultibandFilterFree(lua_State* L) {
  int SWIG_arg = 0;
  MultibandFilter *arg1 = (MultibandFilter *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("MultibandFilterFree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MultibandFilterFree",1,"MultibandFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MultibandFilter,0))){
    SWIG_fail_ptr("MultibandFilterFree",1,SWIGTYPE_p_MultibandFilter);
  }
  
  result = (Error_t)MultibandFilterFree(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultibandFilterFreeD(lua_State* L) {
  int SWIG_arg = 0;
  MultibandFilterD *arg1 = (MultibandFilterD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("MultibandFilterFreeD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MultibandFilterFreeD",1,"MultibandFilterD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MultibandFilterD,0))){
    SWIG_fail_ptr("MultibandFilterFreeD",1,SWIGTYPE_p_MultibandFilterD);
  }
  
  result = (Error_t)MultibandFilterFreeD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultibandFilterFlush(lua_State* L) {
  int SWIG_arg = 0;
  MultibandFilter *arg1 = (MultibandFilter *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("MultibandFilterFlush",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MultibandFilterFlush",1,"MultibandFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MultibandFilter,0))){
    SWIG_fail_ptr("MultibandFilterFlush",1,SWIGTYPE_p_MultibandFilter);
  }
  
  result = (Error_t)MultibandFilterFlush(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultibandFilterFlushD(lua_State* L) {
  int SWIG_arg = 0;
  MultibandFilterD *arg1 = (MultibandFilterD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("MultibandFilterFlushD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MultibandFilterFlushD",1,"MultibandFilterD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MultibandFilterD,0))){
    SWIG_fail_ptr("MultibandFilterFlushD",1,SWIGTYPE_p_MultibandFilterD);
  }
  
  result = (Error_t)MultibandFilterFlushD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultibandFilterSetLowCutoff(lua_State* L) {
  int SWIG_arg = 0;
  MultibandFilter *arg1 = (MultibandFilter *) 0 ;
  float arg2 ;
  Error_t result;
  
  SWIG_check_num_args("MultibandFilterSetLowCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MultibandFilterSetLowCutoff",1,"MultibandFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MultibandFilterSetLowCutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MultibandFilter,0))){
    SWIG_fail_ptr("MultibandFilterSetLowCutoff",1,SWIGTYPE_p_MultibandFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (Error_t)MultibandFilterSetLowCutoff(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultibandFilterSetLowCutoffD(lua_State* L) {
  int SWIG_arg = 0;
  MultibandFilterD *arg1 = (MultibandFilterD *) 0 ;
  double arg2 ;
  Error_t result;
  
  SWIG_check_num_args("MultibandFilterSetLowCutoffD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MultibandFilterSetLowCutoffD",1,"MultibandFilterD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MultibandFilterSetLowCutoffD",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MultibandFilterD,0))){
    SWIG_fail_ptr("MultibandFilterSetLowCutoffD",1,SWIGTYPE_p_MultibandFilterD);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (Error_t)MultibandFilterSetLowCutoffD(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultibandFilterSetHighCutoff(lua_State* L) {
  int SWIG_arg = 0;
  MultibandFilter *arg1 = (MultibandFilter *) 0 ;
  float arg2 ;
  Error_t result;
  
  SWIG_check_num_args("MultibandFilterSetHighCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MultibandFilterSetHighCutoff",1,"MultibandFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MultibandFilterSetHighCutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MultibandFilter,0))){
    SWIG_fail_ptr("MultibandFilterSetHighCutoff",1,SWIGTYPE_p_MultibandFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (Error_t)MultibandFilterSetHighCutoff(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultibandFilterSetHighCutoffD(lua_State* L) {
  int SWIG_arg = 0;
  MultibandFilterD *arg1 = (MultibandFilterD *) 0 ;
  double arg2 ;
  Error_t result;
  
  SWIG_check_num_args("MultibandFilterSetHighCutoffD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MultibandFilterSetHighCutoffD",1,"MultibandFilterD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MultibandFilterSetHighCutoffD",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MultibandFilterD,0))){
    SWIG_fail_ptr("MultibandFilterSetHighCutoffD",1,SWIGTYPE_p_MultibandFilterD);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (Error_t)MultibandFilterSetHighCutoffD(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultibandFilterUpdate(lua_State* L) {
  int SWIG_arg = 0;
  MultibandFilter *arg1 = (MultibandFilter *) 0 ;
  float arg2 ;
  float arg3 ;
  Error_t result;
  
  SWIG_check_num_args("MultibandFilterUpdate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MultibandFilterUpdate",1,"MultibandFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MultibandFilterUpdate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MultibandFilterUpdate",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MultibandFilter,0))){
    SWIG_fail_ptr("MultibandFilterUpdate",1,SWIGTYPE_p_MultibandFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (Error_t)MultibandFilterUpdate(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultibandFilterUpdateD(lua_State* L) {
  int SWIG_arg = 0;
  MultibandFilterD *arg1 = (MultibandFilterD *) 0 ;
  double arg2 ;
  double arg3 ;
  Error_t result;
  
  SWIG_check_num_args("MultibandFilterUpdateD",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MultibandFilterUpdateD",1,"MultibandFilterD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("MultibandFilterUpdateD",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("MultibandFilterUpdateD",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MultibandFilterD,0))){
    SWIG_fail_ptr("MultibandFilterUpdateD",1,SWIGTYPE_p_MultibandFilterD);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (Error_t)MultibandFilterUpdateD(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultibandFilterProcess(lua_State* L) {
  int SWIG_arg = 0;
  MultibandFilter *arg1 = (MultibandFilter *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  unsigned int arg6 ;
  Error_t result;
  
  SWIG_check_num_args("MultibandFilterProcess",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MultibandFilterProcess",1,"MultibandFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("MultibandFilterProcess",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MultibandFilterProcess",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MultibandFilterProcess",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("MultibandFilterProcess",5,"float const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("MultibandFilterProcess",6,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MultibandFilter,0))){
    SWIG_fail_ptr("MultibandFilterProcess",1,SWIGTYPE_p_MultibandFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MultibandFilterProcess",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MultibandFilterProcess",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MultibandFilterProcess",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MultibandFilterProcess",5,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative");
  arg6 = (unsigned int)lua_tonumber(L, 6);
  result = (Error_t)MultibandFilterProcess(arg1,arg2,arg3,arg4,(float const *)arg5,arg6);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultibandFilterProcessD(lua_State* L) {
  int SWIG_arg = 0;
  MultibandFilterD *arg1 = (MultibandFilterD *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  unsigned int arg6 ;
  Error_t result;
  
  SWIG_check_num_args("MultibandFilterProcessD",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MultibandFilterProcessD",1,"MultibandFilterD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("MultibandFilterProcessD",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MultibandFilterProcessD",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("MultibandFilterProcessD",4,"double *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("MultibandFilterProcessD",5,"double const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("MultibandFilterProcessD",6,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MultibandFilterD,0))){
    SWIG_fail_ptr("MultibandFilterProcessD",1,SWIGTYPE_p_MultibandFilterD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MultibandFilterProcessD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MultibandFilterProcessD",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MultibandFilterProcessD",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MultibandFilterProcessD",5,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative");
  arg6 = (unsigned int)lua_tonumber(L, 6);
  result = (Error_t)MultibandFilterProcessD(arg1,arg2,arg3,arg4,(double const *)arg5,arg6);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePoleInit(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  Filter_t arg3 ;
  OnePole *result = 0 ;
  
  SWIG_check_num_args("OnePoleInit",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OnePoleInit",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OnePoleInit",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OnePoleInit",3,"Filter_t");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (Filter_t)(int)lua_tonumber(L, 3);
  result = (OnePole *)OnePoleInit(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OnePole,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePoleInitD(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  Filter_t arg3 ;
  OnePoleD *result = 0 ;
  
  SWIG_check_num_args("OnePoleInitD",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OnePoleInitD",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OnePoleInitD",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OnePoleInitD",3,"Filter_t");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (Filter_t)(int)lua_tonumber(L, 3);
  result = (OnePoleD *)OnePoleInitD(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OnePoleD,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePoleRawInit(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  OnePole *result = 0 ;
  
  SWIG_check_num_args("OnePoleRawInit",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OnePoleRawInit",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OnePoleRawInit",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (OnePole *)OnePoleRawInit(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OnePole,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePoleRawInitD(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  OnePoleD *result = 0 ;
  
  SWIG_check_num_args("OnePoleRawInitD",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OnePoleRawInitD",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OnePoleRawInitD",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (OnePoleD *)OnePoleRawInitD(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OnePoleD,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePoleFree(lua_State* L) {
  int SWIG_arg = 0;
  OnePole *arg1 = (OnePole *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("OnePoleFree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OnePoleFree",1,"OnePole *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OnePole,0))){
    SWIG_fail_ptr("OnePoleFree",1,SWIGTYPE_p_OnePole);
  }
  
  result = (Error_t)OnePoleFree(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePoleFreeD(lua_State* L) {
  int SWIG_arg = 0;
  OnePoleD *arg1 = (OnePoleD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("OnePoleFreeD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OnePoleFreeD",1,"OnePoleD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OnePoleD,0))){
    SWIG_fail_ptr("OnePoleFreeD",1,SWIGTYPE_p_OnePoleD);
  }
  
  result = (Error_t)OnePoleFreeD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePoleFlush(lua_State* L) {
  int SWIG_arg = 0;
  OnePole *arg1 = (OnePole *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("OnePoleFlush",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OnePoleFlush",1,"OnePole *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OnePole,0))){
    SWIG_fail_ptr("OnePoleFlush",1,SWIGTYPE_p_OnePole);
  }
  
  result = (Error_t)OnePoleFlush(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePoleFlushD(lua_State* L) {
  int SWIG_arg = 0;
  OnePoleD *arg1 = (OnePoleD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("OnePoleFlushD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OnePoleFlushD",1,"OnePoleD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OnePoleD,0))){
    SWIG_fail_ptr("OnePoleFlushD",1,SWIGTYPE_p_OnePoleD);
  }
  
  result = (Error_t)OnePoleFlushD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePoleSetType(lua_State* L) {
  int SWIG_arg = 0;
  OnePole *arg1 = (OnePole *) 0 ;
  Filter_t arg2 ;
  Error_t result;
  
  SWIG_check_num_args("OnePoleSetType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OnePoleSetType",1,"OnePole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OnePoleSetType",2,"Filter_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OnePole,0))){
    SWIG_fail_ptr("OnePoleSetType",1,SWIGTYPE_p_OnePole);
  }
  
  arg2 = (Filter_t)(int)lua_tonumber(L, 2);
  result = (Error_t)OnePoleSetType(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePoleSetTypeD(lua_State* L) {
  int SWIG_arg = 0;
  OnePoleD *arg1 = (OnePoleD *) 0 ;
  Filter_t arg2 ;
  Error_t result;
  
  SWIG_check_num_args("OnePoleSetTypeD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OnePoleSetTypeD",1,"OnePoleD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OnePoleSetTypeD",2,"Filter_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OnePoleD,0))){
    SWIG_fail_ptr("OnePoleSetTypeD",1,SWIGTYPE_p_OnePoleD);
  }
  
  arg2 = (Filter_t)(int)lua_tonumber(L, 2);
  result = (Error_t)OnePoleSetTypeD(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePoleSetCutoff(lua_State* L) {
  int SWIG_arg = 0;
  OnePole *arg1 = (OnePole *) 0 ;
  float arg2 ;
  Error_t result;
  
  SWIG_check_num_args("OnePoleSetCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OnePoleSetCutoff",1,"OnePole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OnePoleSetCutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OnePole,0))){
    SWIG_fail_ptr("OnePoleSetCutoff",1,SWIGTYPE_p_OnePole);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (Error_t)OnePoleSetCutoff(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePoleSetCutoffD(lua_State* L) {
  int SWIG_arg = 0;
  OnePoleD *arg1 = (OnePoleD *) 0 ;
  double arg2 ;
  Error_t result;
  
  SWIG_check_num_args("OnePoleSetCutoffD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OnePoleSetCutoffD",1,"OnePoleD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OnePoleSetCutoffD",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OnePoleD,0))){
    SWIG_fail_ptr("OnePoleSetCutoffD",1,SWIGTYPE_p_OnePoleD);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (Error_t)OnePoleSetCutoffD(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePoleSetSampleRate(lua_State* L) {
  int SWIG_arg = 0;
  OnePole *arg1 = (OnePole *) 0 ;
  float arg2 ;
  Error_t result;
  
  SWIG_check_num_args("OnePoleSetSampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OnePoleSetSampleRate",1,"OnePole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OnePoleSetSampleRate",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OnePole,0))){
    SWIG_fail_ptr("OnePoleSetSampleRate",1,SWIGTYPE_p_OnePole);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (Error_t)OnePoleSetSampleRate(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePoleSetSampleRateD(lua_State* L) {
  int SWIG_arg = 0;
  OnePoleD *arg1 = (OnePoleD *) 0 ;
  double arg2 ;
  Error_t result;
  
  SWIG_check_num_args("OnePoleSetSampleRateD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OnePoleSetSampleRateD",1,"OnePoleD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OnePoleSetSampleRateD",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OnePoleD,0))){
    SWIG_fail_ptr("OnePoleSetSampleRateD",1,SWIGTYPE_p_OnePoleD);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (Error_t)OnePoleSetSampleRateD(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePoleSetCoefficients(lua_State* L) {
  int SWIG_arg = 0;
  OnePole *arg1 = (OnePole *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("OnePoleSetCoefficients",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OnePoleSetCoefficients",1,"OnePole *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("OnePoleSetCoefficients",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("OnePoleSetCoefficients",3,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OnePole,0))){
    SWIG_fail_ptr("OnePoleSetCoefficients",1,SWIGTYPE_p_OnePole);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("OnePoleSetCoefficients",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("OnePoleSetCoefficients",3,SWIGTYPE_p_float);
  }
  
  result = (Error_t)OnePoleSetCoefficients(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePoleSetCoefficientsD(lua_State* L) {
  int SWIG_arg = 0;
  OnePoleD *arg1 = (OnePoleD *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("OnePoleSetCoefficientsD",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OnePoleSetCoefficientsD",1,"OnePoleD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("OnePoleSetCoefficientsD",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("OnePoleSetCoefficientsD",3,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OnePoleD,0))){
    SWIG_fail_ptr("OnePoleSetCoefficientsD",1,SWIGTYPE_p_OnePoleD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("OnePoleSetCoefficientsD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("OnePoleSetCoefficientsD",3,SWIGTYPE_p_double);
  }
  
  result = (Error_t)OnePoleSetCoefficientsD(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePoleProcess(lua_State* L) {
  int SWIG_arg = 0;
  OnePole *arg1 = (OnePole *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("OnePoleProcess",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OnePoleProcess",1,"OnePole *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("OnePoleProcess",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("OnePoleProcess",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OnePoleProcess",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OnePole,0))){
    SWIG_fail_ptr("OnePoleProcess",1,SWIGTYPE_p_OnePole);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("OnePoleProcess",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("OnePoleProcess",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)OnePoleProcess(arg1,arg2,(float const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePoleProcessD(lua_State* L) {
  int SWIG_arg = 0;
  OnePoleD *arg1 = (OnePoleD *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("OnePoleProcessD",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OnePoleProcessD",1,"OnePoleD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("OnePoleProcessD",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("OnePoleProcessD",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OnePoleProcessD",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OnePoleD,0))){
    SWIG_fail_ptr("OnePoleProcessD",1,SWIGTYPE_p_OnePoleD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("OnePoleProcessD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("OnePoleProcessD",3,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)OnePoleProcessD(arg1,arg2,(double const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePoleTick(lua_State* L) {
  int SWIG_arg = 0;
  OnePole *arg1 = (OnePole *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("OnePoleTick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OnePoleTick",1,"OnePole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OnePoleTick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OnePole,0))){
    SWIG_fail_ptr("OnePoleTick",1,SWIGTYPE_p_OnePole);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)OnePoleTick(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePoleTickD(lua_State* L) {
  int SWIG_arg = 0;
  OnePoleD *arg1 = (OnePoleD *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("OnePoleTickD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OnePoleTickD",1,"OnePoleD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OnePoleTickD",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OnePoleD,0))){
    SWIG_fail_ptr("OnePoleTickD",1,SWIGTYPE_p_OnePoleD);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)OnePoleTickD(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePoleAlpha(lua_State* L) {
  int SWIG_arg = 0;
  OnePole *arg1 = (OnePole *) 0 ;
  float result;
  
  SWIG_check_num_args("OnePoleAlpha",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OnePoleAlpha",1,"OnePole *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OnePole,0))){
    SWIG_fail_ptr("OnePoleAlpha",1,SWIGTYPE_p_OnePole);
  }
  
  result = (float)OnePoleAlpha(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePoleAlphaD(lua_State* L) {
  int SWIG_arg = 0;
  OnePoleD *arg1 = (OnePoleD *) 0 ;
  double result;
  
  SWIG_check_num_args("OnePoleAlphaD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OnePoleAlphaD",1,"OnePoleD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OnePoleD,0))){
    SWIG_fail_ptr("OnePoleAlphaD",1,SWIGTYPE_p_OnePoleD);
  }
  
  result = (double)OnePoleAlphaD(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePoleBeta(lua_State* L) {
  int SWIG_arg = 0;
  OnePole *arg1 = (OnePole *) 0 ;
  float result;
  
  SWIG_check_num_args("OnePoleBeta",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OnePoleBeta",1,"OnePole *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OnePole,0))){
    SWIG_fail_ptr("OnePoleBeta",1,SWIGTYPE_p_OnePole);
  }
  
  result = (float)OnePoleBeta(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnePoleBetaD(lua_State* L) {
  int SWIG_arg = 0;
  OnePoleD *arg1 = (OnePoleD *) 0 ;
  double result;
  
  SWIG_check_num_args("OnePoleBetaD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OnePoleBetaD",1,"OnePoleD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OnePoleD,0))){
    SWIG_fail_ptr("OnePoleBetaD",1,SWIGTYPE_p_OnePoleD);
  }
  
  result = (double)OnePoleBetaD(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OptoInit(lua_State* L) {
  int SWIG_arg = 0;
  Opto_t arg1 ;
  float arg2 ;
  float arg3 ;
  Opto *result = 0 ;
  
  SWIG_check_num_args("OptoInit",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OptoInit",1,"Opto_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OptoInit",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OptoInit",3,"float");
  arg1 = (Opto_t)(int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (Opto *)OptoInit(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Opto,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OptoInitD(lua_State* L) {
  int SWIG_arg = 0;
  Opto_t arg1 ;
  double arg2 ;
  double arg3 ;
  OptoD *result = 0 ;
  
  SWIG_check_num_args("OptoInitD",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("OptoInitD",1,"Opto_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OptoInitD",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("OptoInitD",3,"double");
  arg1 = (Opto_t)(int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (OptoD *)OptoInitD(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_OptoD,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OptoFree(lua_State* L) {
  int SWIG_arg = 0;
  Opto *arg1 = (Opto *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("OptoFree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OptoFree",1,"Opto *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Opto,0))){
    SWIG_fail_ptr("OptoFree",1,SWIGTYPE_p_Opto);
  }
  
  result = (Error_t)OptoFree(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OptoFreeD(lua_State* L) {
  int SWIG_arg = 0;
  OptoD *arg1 = (OptoD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("OptoFreeD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OptoFreeD",1,"OptoD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OptoD,0))){
    SWIG_fail_ptr("OptoFreeD",1,SWIGTYPE_p_OptoD);
  }
  
  result = (Error_t)OptoFreeD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OptoSetDelay(lua_State* L) {
  int SWIG_arg = 0;
  Opto *arg1 = (Opto *) 0 ;
  float arg2 ;
  Error_t result;
  
  SWIG_check_num_args("OptoSetDelay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OptoSetDelay",1,"Opto *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OptoSetDelay",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Opto,0))){
    SWIG_fail_ptr("OptoSetDelay",1,SWIGTYPE_p_Opto);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (Error_t)OptoSetDelay(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OptoSetDelayD(lua_State* L) {
  int SWIG_arg = 0;
  OptoD *arg1 = (OptoD *) 0 ;
  double arg2 ;
  Error_t result;
  
  SWIG_check_num_args("OptoSetDelayD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OptoSetDelayD",1,"OptoD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OptoSetDelayD",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OptoD,0))){
    SWIG_fail_ptr("OptoSetDelayD",1,SWIGTYPE_p_OptoD);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (Error_t)OptoSetDelayD(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OptoProcess(lua_State* L) {
  int SWIG_arg = 0;
  Opto *arg1 = (Opto *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("OptoProcess",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OptoProcess",1,"Opto *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("OptoProcess",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("OptoProcess",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OptoProcess",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Opto,0))){
    SWIG_fail_ptr("OptoProcess",1,SWIGTYPE_p_Opto);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("OptoProcess",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("OptoProcess",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)OptoProcess(arg1,arg2,(float const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OptoProcessD(lua_State* L) {
  int SWIG_arg = 0;
  OptoD *arg1 = (OptoD *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("OptoProcessD",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OptoProcessD",1,"OptoD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("OptoProcessD",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("OptoProcessD",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("OptoProcessD",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OptoD,0))){
    SWIG_fail_ptr("OptoProcessD",1,SWIGTYPE_p_OptoD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("OptoProcessD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("OptoProcessD",3,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)OptoProcessD(arg1,arg2,(double const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OptoTick(lua_State* L) {
  int SWIG_arg = 0;
  Opto *arg1 = (Opto *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("OptoTick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OptoTick",1,"Opto *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OptoTick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Opto,0))){
    SWIG_fail_ptr("OptoTick",1,SWIGTYPE_p_Opto);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)OptoTick(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OptoTickD(lua_State* L) {
  int SWIG_arg = 0;
  OptoD *arg1 = (OptoD *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("OptoTickD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("OptoTickD",1,"OptoD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("OptoTickD",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_OptoD,0))){
    SWIG_fail_ptr("OptoTickD",1,SWIGTYPE_p_OptoD);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)OptoTickD(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_linear_pan(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("linear_pan",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("linear_pan",1,"float");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("linear_pan",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("linear_pan",3,"float *");
  arg1 = (float)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("linear_pan",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("linear_pan",3,SWIGTYPE_p_float);
  }
  
  result = (Error_t)linear_pan(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_linear_panD(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("linear_panD",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("linear_panD",1,"double");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("linear_panD",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("linear_panD",3,"double *");
  arg1 = (double)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("linear_panD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("linear_panD",3,SWIGTYPE_p_double);
  }
  
  result = (Error_t)linear_panD(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_equal_power_3dB_pan(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("equal_power_3dB_pan",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("equal_power_3dB_pan",1,"float");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("equal_power_3dB_pan",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("equal_power_3dB_pan",3,"float *");
  arg1 = (float)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("equal_power_3dB_pan",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("equal_power_3dB_pan",3,SWIGTYPE_p_float);
  }
  
  result = (Error_t)equal_power_3dB_pan(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_equal_power_3dB_panD(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("equal_power_3dB_panD",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("equal_power_3dB_panD",1,"double");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("equal_power_3dB_panD",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("equal_power_3dB_panD",3,"double *");
  arg1 = (double)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("equal_power_3dB_panD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("equal_power_3dB_panD",3,SWIGTYPE_p_double);
  }
  
  result = (Error_t)equal_power_3dB_panD(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_equal_power_6dB_pan(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("equal_power_6dB_pan",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("equal_power_6dB_pan",1,"float");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("equal_power_6dB_pan",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("equal_power_6dB_pan",3,"float *");
  arg1 = (float)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("equal_power_6dB_pan",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("equal_power_6dB_pan",3,SWIGTYPE_p_float);
  }
  
  result = (Error_t)equal_power_6dB_pan(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_equal_power_6dB_panD(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("equal_power_6dB_panD",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("equal_power_6dB_panD",1,"double");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("equal_power_6dB_panD",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("equal_power_6dB_panD",3,"double *");
  arg1 = (double)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("equal_power_6dB_panD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("equal_power_6dB_panD",3,SWIGTYPE_p_double);
  }
  
  result = (Error_t)equal_power_6dB_panD(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyphaseCoeffs_set(lua_State* L) {
  int SWIG_arg = 0;
  float ***arg1 ;
  
  SWIG_check_num_args("PolyphaseCoeffs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PolyphaseCoeffs",1,"float const **[N_FACTORS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_p_float,0))){
    SWIG_fail_ptr("PolyphaseCoeffs_set",1,SWIGTYPE_p_p_p_float);
  }
  
  {
    size_t ii;
    float const ** *b = (float const ** *) PolyphaseCoeffs;
    for (ii = 0; ii < (size_t)N_FACTORS; ii++) b[ii] = *((float const ** *) arg1 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyphaseCoeffs_get(lua_State* L) {
  int SWIG_arg = 0;
  float ***result = 0 ;
  
  SWIG_check_num_args("PolyphaseCoeffs",0,0)
  result = (float ***)(float ***)PolyphaseCoeffs;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyphaseCoeffsD_set(lua_State* L) {
  int SWIG_arg = 0;
  double ***arg1 ;
  
  SWIG_check_num_args("PolyphaseCoeffsD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PolyphaseCoeffsD",1,"double const **[N_FACTORS]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_p_p_double,0))){
    SWIG_fail_ptr("PolyphaseCoeffsD_set",1,SWIGTYPE_p_p_p_double);
  }
  
  {
    size_t ii;
    double const ** *b = (double const ** *) PolyphaseCoeffsD;
    for (ii = 0; ii < (size_t)N_FACTORS; ii++) b[ii] = *((double const ** *) arg1 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolyphaseCoeffsD_get(lua_State* L) {
  int SWIG_arg = 0;
  double ***result = 0 ;
  
  SWIG_check_num_args("PolyphaseCoeffsD",0,0)
  result = (double ***)(double ***)PolyphaseCoeffsD;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolySaturatorInit(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  PolySaturator *result = 0 ;
  
  SWIG_check_num_args("PolySaturatorInit",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("PolySaturatorInit",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (PolySaturator *)PolySaturatorInit(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PolySaturator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolySaturatorInitD(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  PolySaturatorD *result = 0 ;
  
  SWIG_check_num_args("PolySaturatorInitD",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("PolySaturatorInitD",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (PolySaturatorD *)PolySaturatorInitD(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_PolySaturatorD,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolySaturatorFree(lua_State* L) {
  int SWIG_arg = 0;
  PolySaturator *arg1 = (PolySaturator *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("PolySaturatorFree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PolySaturatorFree",1,"PolySaturator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PolySaturator,0))){
    SWIG_fail_ptr("PolySaturatorFree",1,SWIGTYPE_p_PolySaturator);
  }
  
  result = (Error_t)PolySaturatorFree(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolySaturatorFreeD(lua_State* L) {
  int SWIG_arg = 0;
  PolySaturatorD *arg1 = (PolySaturatorD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("PolySaturatorFreeD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PolySaturatorFreeD",1,"PolySaturatorD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PolySaturatorD,0))){
    SWIG_fail_ptr("PolySaturatorFreeD",1,SWIGTYPE_p_PolySaturatorD);
  }
  
  result = (Error_t)PolySaturatorFreeD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolySaturatorSetN(lua_State* L) {
  int SWIG_arg = 0;
  PolySaturator *arg1 = (PolySaturator *) 0 ;
  float arg2 ;
  Error_t result;
  
  SWIG_check_num_args("PolySaturatorSetN",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PolySaturatorSetN",1,"PolySaturator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PolySaturatorSetN",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PolySaturator,0))){
    SWIG_fail_ptr("PolySaturatorSetN",1,SWIGTYPE_p_PolySaturator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (Error_t)PolySaturatorSetN(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolySaturatorSetND(lua_State* L) {
  int SWIG_arg = 0;
  PolySaturatorD *arg1 = (PolySaturatorD *) 0 ;
  double arg2 ;
  Error_t result;
  
  SWIG_check_num_args("PolySaturatorSetND",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PolySaturatorSetND",1,"PolySaturatorD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PolySaturatorSetND",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PolySaturatorD,0))){
    SWIG_fail_ptr("PolySaturatorSetND",1,SWIGTYPE_p_PolySaturatorD);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (Error_t)PolySaturatorSetND(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolySaturatorProcess(lua_State* L) {
  int SWIG_arg = 0;
  PolySaturator *arg1 = (PolySaturator *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("PolySaturatorProcess",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PolySaturatorProcess",1,"PolySaturator *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("PolySaturatorProcess",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("PolySaturatorProcess",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("PolySaturatorProcess",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PolySaturator,0))){
    SWIG_fail_ptr("PolySaturatorProcess",1,SWIGTYPE_p_PolySaturator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("PolySaturatorProcess",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("PolySaturatorProcess",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)PolySaturatorProcess(arg1,arg2,(float const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolySaturatorProcessD(lua_State* L) {
  int SWIG_arg = 0;
  PolySaturatorD *arg1 = (PolySaturatorD *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("PolySaturatorProcessD",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PolySaturatorProcessD",1,"PolySaturatorD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("PolySaturatorProcessD",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("PolySaturatorProcessD",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("PolySaturatorProcessD",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PolySaturatorD,0))){
    SWIG_fail_ptr("PolySaturatorProcessD",1,SWIGTYPE_p_PolySaturatorD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("PolySaturatorProcessD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("PolySaturatorProcessD",3,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)PolySaturatorProcessD(arg1,arg2,(double const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolySaturatorTick(lua_State* L) {
  int SWIG_arg = 0;
  PolySaturator *arg1 = (PolySaturator *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("PolySaturatorTick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PolySaturatorTick",1,"PolySaturator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PolySaturatorTick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PolySaturator,0))){
    SWIG_fail_ptr("PolySaturatorTick",1,SWIGTYPE_p_PolySaturator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)PolySaturatorTick(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolySaturatorTickD(lua_State* L) {
  int SWIG_arg = 0;
  PolySaturatorD *arg1 = (PolySaturatorD *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("PolySaturatorTickD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("PolySaturatorTickD",1,"PolySaturatorD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PolySaturatorTickD",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PolySaturatorD,0))){
    SWIG_fail_ptr("PolySaturatorTickD",1,SWIGTYPE_p_PolySaturatorD);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)PolySaturatorTickD(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJFilterInit(lua_State* L) {
  int SWIG_arg = 0;
  Filter_t arg1 ;
  float arg2 ;
  float arg3 ;
  RBJFilter *result = 0 ;
  
  SWIG_check_num_args("RBJFilterInit",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("RBJFilterInit",1,"Filter_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RBJFilterInit",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RBJFilterInit",3,"float");
  arg1 = (Filter_t)(int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (RBJFilter *)RBJFilterInit(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RBJFilter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJFilterInitD(lua_State* L) {
  int SWIG_arg = 0;
  Filter_t arg1 ;
  double arg2 ;
  double arg3 ;
  RBJFilterD *result = 0 ;
  
  SWIG_check_num_args("RBJFilterInitD",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("RBJFilterInitD",1,"Filter_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RBJFilterInitD",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RBJFilterInitD",3,"double");
  arg1 = (Filter_t)(int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (RBJFilterD *)RBJFilterInitD(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RBJFilterD,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJFilterFree(lua_State* L) {
  int SWIG_arg = 0;
  RBJFilter *arg1 = (RBJFilter *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("RBJFilterFree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RBJFilterFree",1,"RBJFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RBJFilter,0))){
    SWIG_fail_ptr("RBJFilterFree",1,SWIGTYPE_p_RBJFilter);
  }
  
  result = (Error_t)RBJFilterFree(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJFilterFreeD(lua_State* L) {
  int SWIG_arg = 0;
  RBJFilterD *arg1 = (RBJFilterD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("RBJFilterFreeD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RBJFilterFreeD",1,"RBJFilterD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RBJFilterD,0))){
    SWIG_fail_ptr("RBJFilterFreeD",1,SWIGTYPE_p_RBJFilterD);
  }
  
  result = (Error_t)RBJFilterFreeD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJFilterSetType(lua_State* L) {
  int SWIG_arg = 0;
  RBJFilter *arg1 = (RBJFilter *) 0 ;
  Filter_t arg2 ;
  Error_t result;
  
  SWIG_check_num_args("RBJFilterSetType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RBJFilterSetType",1,"RBJFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RBJFilterSetType",2,"Filter_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RBJFilter,0))){
    SWIG_fail_ptr("RBJFilterSetType",1,SWIGTYPE_p_RBJFilter);
  }
  
  arg2 = (Filter_t)(int)lua_tonumber(L, 2);
  result = (Error_t)RBJFilterSetType(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJFilterSetTypeD(lua_State* L) {
  int SWIG_arg = 0;
  RBJFilterD *arg1 = (RBJFilterD *) 0 ;
  Filter_t arg2 ;
  Error_t result;
  
  SWIG_check_num_args("RBJFilterSetTypeD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RBJFilterSetTypeD",1,"RBJFilterD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RBJFilterSetTypeD",2,"Filter_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RBJFilterD,0))){
    SWIG_fail_ptr("RBJFilterSetTypeD",1,SWIGTYPE_p_RBJFilterD);
  }
  
  arg2 = (Filter_t)(int)lua_tonumber(L, 2);
  result = (Error_t)RBJFilterSetTypeD(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJFilterSetCutoff(lua_State* L) {
  int SWIG_arg = 0;
  RBJFilter *arg1 = (RBJFilter *) 0 ;
  float arg2 ;
  Error_t result;
  
  SWIG_check_num_args("RBJFilterSetCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RBJFilterSetCutoff",1,"RBJFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RBJFilterSetCutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RBJFilter,0))){
    SWIG_fail_ptr("RBJFilterSetCutoff",1,SWIGTYPE_p_RBJFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (Error_t)RBJFilterSetCutoff(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJFilterSetCutoffD(lua_State* L) {
  int SWIG_arg = 0;
  RBJFilterD *arg1 = (RBJFilterD *) 0 ;
  double arg2 ;
  Error_t result;
  
  SWIG_check_num_args("RBJFilterSetCutoffD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RBJFilterSetCutoffD",1,"RBJFilterD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RBJFilterSetCutoffD",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RBJFilterD,0))){
    SWIG_fail_ptr("RBJFilterSetCutoffD",1,SWIGTYPE_p_RBJFilterD);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (Error_t)RBJFilterSetCutoffD(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJFilterSetQ(lua_State* L) {
  int SWIG_arg = 0;
  RBJFilter *arg1 = (RBJFilter *) 0 ;
  float arg2 ;
  Error_t result;
  
  SWIG_check_num_args("RBJFilterSetQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RBJFilterSetQ",1,"RBJFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RBJFilterSetQ",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RBJFilter,0))){
    SWIG_fail_ptr("RBJFilterSetQ",1,SWIGTYPE_p_RBJFilter);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (Error_t)RBJFilterSetQ(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJFilterSetQD(lua_State* L) {
  int SWIG_arg = 0;
  RBJFilterD *arg1 = (RBJFilterD *) 0 ;
  double arg2 ;
  Error_t result;
  
  SWIG_check_num_args("RBJFilterSetQD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RBJFilterSetQD",1,"RBJFilterD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RBJFilterSetQD",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RBJFilterD,0))){
    SWIG_fail_ptr("RBJFilterSetQD",1,SWIGTYPE_p_RBJFilterD);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (Error_t)RBJFilterSetQD(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJFilterSetParams(lua_State* L) {
  int SWIG_arg = 0;
  RBJFilter *arg1 = (RBJFilter *) 0 ;
  Filter_t arg2 ;
  float arg3 ;
  float arg4 ;
  Error_t result;
  
  SWIG_check_num_args("RBJFilterSetParams",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RBJFilterSetParams",1,"RBJFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RBJFilterSetParams",2,"Filter_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RBJFilterSetParams",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("RBJFilterSetParams",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RBJFilter,0))){
    SWIG_fail_ptr("RBJFilterSetParams",1,SWIGTYPE_p_RBJFilter);
  }
  
  arg2 = (Filter_t)(int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (Error_t)RBJFilterSetParams(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJFilterSetParamsD(lua_State* L) {
  int SWIG_arg = 0;
  RBJFilterD *arg1 = (RBJFilterD *) 0 ;
  Filter_t arg2 ;
  double arg3 ;
  double arg4 ;
  Error_t result;
  
  SWIG_check_num_args("RBJFilterSetParamsD",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RBJFilterSetParamsD",1,"RBJFilterD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RBJFilterSetParamsD",2,"Filter_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RBJFilterSetParamsD",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("RBJFilterSetParamsD",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RBJFilterD,0))){
    SWIG_fail_ptr("RBJFilterSetParamsD",1,SWIGTYPE_p_RBJFilterD);
  }
  
  arg2 = (Filter_t)(int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (Error_t)RBJFilterSetParamsD(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJFilterProcess(lua_State* L) {
  int SWIG_arg = 0;
  RBJFilter *arg1 = (RBJFilter *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("RBJFilterProcess",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RBJFilterProcess",1,"RBJFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("RBJFilterProcess",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("RBJFilterProcess",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("RBJFilterProcess",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RBJFilter,0))){
    SWIG_fail_ptr("RBJFilterProcess",1,SWIGTYPE_p_RBJFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RBJFilterProcess",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RBJFilterProcess",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)RBJFilterProcess(arg1,arg2,(float const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJFilterProcessD(lua_State* L) {
  int SWIG_arg = 0;
  RBJFilterD *arg1 = (RBJFilterD *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("RBJFilterProcessD",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RBJFilterProcessD",1,"RBJFilterD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("RBJFilterProcessD",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("RBJFilterProcessD",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("RBJFilterProcessD",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RBJFilterD,0))){
    SWIG_fail_ptr("RBJFilterProcessD",1,SWIGTYPE_p_RBJFilterD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RBJFilterProcessD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RBJFilterProcessD",3,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)RBJFilterProcessD(arg1,arg2,(double const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJFilterFlush(lua_State* L) {
  int SWIG_arg = 0;
  RBJFilter *arg1 = (RBJFilter *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("RBJFilterFlush",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RBJFilterFlush",1,"RBJFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RBJFilter,0))){
    SWIG_fail_ptr("RBJFilterFlush",1,SWIGTYPE_p_RBJFilter);
  }
  
  result = (Error_t)RBJFilterFlush(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RBJFilterFlushD(lua_State* L) {
  int SWIG_arg = 0;
  RBJFilterD *arg1 = (RBJFilterD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("RBJFilterFlushD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RBJFilterFlushD",1,"RBJFilterD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RBJFilterD,0))){
    SWIG_fail_ptr("RBJFilterFlushD",1,SWIGTYPE_p_RBJFilterD);
  }
  
  result = (Error_t)RBJFilterFlushD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RMSEstimatorInit(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  RMSEstimator *result = 0 ;
  
  SWIG_check_num_args("RMSEstimatorInit",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("RMSEstimatorInit",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RMSEstimatorInit",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (RMSEstimator *)RMSEstimatorInit(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RMSEstimator,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RMSEstimatorInitD(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  RMSEstimatorD *result = 0 ;
  
  SWIG_check_num_args("RMSEstimatorInitD",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("RMSEstimatorInitD",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RMSEstimatorInitD",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (RMSEstimatorD *)RMSEstimatorInitD(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RMSEstimatorD,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RMSEstimatorFree(lua_State* L) {
  int SWIG_arg = 0;
  RMSEstimator *arg1 = (RMSEstimator *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("RMSEstimatorFree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RMSEstimatorFree",1,"RMSEstimator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RMSEstimator,0))){
    SWIG_fail_ptr("RMSEstimatorFree",1,SWIGTYPE_p_RMSEstimator);
  }
  
  result = (Error_t)RMSEstimatorFree(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RMSEstimatorFreeD(lua_State* L) {
  int SWIG_arg = 0;
  RMSEstimatorD *arg1 = (RMSEstimatorD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("RMSEstimatorFreeD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RMSEstimatorFreeD",1,"RMSEstimatorD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RMSEstimatorD,0))){
    SWIG_fail_ptr("RMSEstimatorFreeD",1,SWIGTYPE_p_RMSEstimatorD);
  }
  
  result = (Error_t)RMSEstimatorFreeD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RMSEstimatorFlush(lua_State* L) {
  int SWIG_arg = 0;
  RMSEstimator *arg1 = (RMSEstimator *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("RMSEstimatorFlush",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RMSEstimatorFlush",1,"RMSEstimator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RMSEstimator,0))){
    SWIG_fail_ptr("RMSEstimatorFlush",1,SWIGTYPE_p_RMSEstimator);
  }
  
  result = (Error_t)RMSEstimatorFlush(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RMSEstimatorFlushD(lua_State* L) {
  int SWIG_arg = 0;
  RMSEstimatorD *arg1 = (RMSEstimatorD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("RMSEstimatorFlushD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RMSEstimatorFlushD",1,"RMSEstimatorD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RMSEstimatorD,0))){
    SWIG_fail_ptr("RMSEstimatorFlushD",1,SWIGTYPE_p_RMSEstimatorD);
  }
  
  result = (Error_t)RMSEstimatorFlushD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RMSEstimatorSetAvgTime(lua_State* L) {
  int SWIG_arg = 0;
  RMSEstimator *arg1 = (RMSEstimator *) 0 ;
  float arg2 ;
  Error_t result;
  
  SWIG_check_num_args("RMSEstimatorSetAvgTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RMSEstimatorSetAvgTime",1,"RMSEstimator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RMSEstimatorSetAvgTime",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RMSEstimator,0))){
    SWIG_fail_ptr("RMSEstimatorSetAvgTime",1,SWIGTYPE_p_RMSEstimator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (Error_t)RMSEstimatorSetAvgTime(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RMSEstimatorSetAvgTimeD(lua_State* L) {
  int SWIG_arg = 0;
  RMSEstimatorD *arg1 = (RMSEstimatorD *) 0 ;
  double arg2 ;
  Error_t result;
  
  SWIG_check_num_args("RMSEstimatorSetAvgTimeD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RMSEstimatorSetAvgTimeD",1,"RMSEstimatorD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RMSEstimatorSetAvgTimeD",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RMSEstimatorD,0))){
    SWIG_fail_ptr("RMSEstimatorSetAvgTimeD",1,SWIGTYPE_p_RMSEstimatorD);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (Error_t)RMSEstimatorSetAvgTimeD(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RMSEstimatorProcess(lua_State* L) {
  int SWIG_arg = 0;
  RMSEstimator *arg1 = (RMSEstimator *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("RMSEstimatorProcess",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RMSEstimatorProcess",1,"RMSEstimator *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("RMSEstimatorProcess",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("RMSEstimatorProcess",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("RMSEstimatorProcess",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RMSEstimator,0))){
    SWIG_fail_ptr("RMSEstimatorProcess",1,SWIGTYPE_p_RMSEstimator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RMSEstimatorProcess",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RMSEstimatorProcess",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)RMSEstimatorProcess(arg1,arg2,(float const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RMSEstimatorProcessD(lua_State* L) {
  int SWIG_arg = 0;
  RMSEstimatorD *arg1 = (RMSEstimatorD *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("RMSEstimatorProcessD",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RMSEstimatorProcessD",1,"RMSEstimatorD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("RMSEstimatorProcessD",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("RMSEstimatorProcessD",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("RMSEstimatorProcessD",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RMSEstimatorD,0))){
    SWIG_fail_ptr("RMSEstimatorProcessD",1,SWIGTYPE_p_RMSEstimatorD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RMSEstimatorProcessD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RMSEstimatorProcessD",3,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)RMSEstimatorProcessD(arg1,arg2,(double const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RMSEstimatorTick(lua_State* L) {
  int SWIG_arg = 0;
  RMSEstimator *arg1 = (RMSEstimator *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("RMSEstimatorTick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RMSEstimatorTick",1,"RMSEstimator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RMSEstimatorTick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RMSEstimator,0))){
    SWIG_fail_ptr("RMSEstimatorTick",1,SWIGTYPE_p_RMSEstimator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)RMSEstimatorTick(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RMSEstimatorTickD(lua_State* L) {
  int SWIG_arg = 0;
  RMSEstimatorD *arg1 = (RMSEstimatorD *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("RMSEstimatorTickD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RMSEstimatorTickD",1,"RMSEstimatorD *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RMSEstimatorTickD",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RMSEstimatorD,0))){
    SWIG_fail_ptr("RMSEstimatorTickD",1,SWIGTYPE_p_RMSEstimatorD);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)RMSEstimatorTickD(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpectrumAnalyzerInit(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  float arg2 ;
  SpectrumAnalyzer *result = 0 ;
  
  SWIG_check_num_args("SpectrumAnalyzerInit",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SpectrumAnalyzerInit",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SpectrumAnalyzerInit",2,"float");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (SpectrumAnalyzer *)SpectrumAnalyzerInit(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SpectrumAnalyzer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpectrumAnalyzerInitD(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  double arg2 ;
  SpectrumAnalyzerD *result = 0 ;
  
  SWIG_check_num_args("SpectrumAnalyzerInitD",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("SpectrumAnalyzerInitD",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SpectrumAnalyzerInitD",2,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (SpectrumAnalyzerD *)SpectrumAnalyzerInitD(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SpectrumAnalyzerD,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpectrumAnalyzerAnalyze(lua_State* L) {
  int SWIG_arg = 0;
  SpectrumAnalyzer *arg1 = (SpectrumAnalyzer *) 0 ;
  float *arg2 = (float *) 0 ;
  
  SWIG_check_num_args("SpectrumAnalyzerAnalyze",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SpectrumAnalyzerAnalyze",1,"SpectrumAnalyzer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SpectrumAnalyzerAnalyze",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SpectrumAnalyzer,0))){
    SWIG_fail_ptr("SpectrumAnalyzerAnalyze",1,SWIGTYPE_p_SpectrumAnalyzer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("SpectrumAnalyzerAnalyze",2,SWIGTYPE_p_float);
  }
  
  SpectrumAnalyzerAnalyze(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpectrumAnalyzerAnalyzeD(lua_State* L) {
  int SWIG_arg = 0;
  SpectrumAnalyzerD *arg1 = (SpectrumAnalyzerD *) 0 ;
  double *arg2 = (double *) 0 ;
  
  SWIG_check_num_args("SpectrumAnalyzerAnalyzeD",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SpectrumAnalyzerAnalyzeD",1,"SpectrumAnalyzerD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("SpectrumAnalyzerAnalyzeD",2,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SpectrumAnalyzerD,0))){
    SWIG_fail_ptr("SpectrumAnalyzerAnalyzeD",1,SWIGTYPE_p_SpectrumAnalyzerD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("SpectrumAnalyzerAnalyzeD",2,SWIGTYPE_p_double);
  }
  
  SpectrumAnalyzerAnalyzeD(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpectralCentroid(lua_State* L) {
  int SWIG_arg = 0;
  SpectrumAnalyzer *arg1 = (SpectrumAnalyzer *) 0 ;
  float result;
  
  SWIG_check_num_args("SpectralCentroid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SpectralCentroid",1,"SpectrumAnalyzer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SpectrumAnalyzer,0))){
    SWIG_fail_ptr("SpectralCentroid",1,SWIGTYPE_p_SpectrumAnalyzer);
  }
  
  result = (float)SpectralCentroid(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpectralCentroidD(lua_State* L) {
  int SWIG_arg = 0;
  SpectrumAnalyzerD *arg1 = (SpectrumAnalyzerD *) 0 ;
  double result;
  
  SWIG_check_num_args("SpectralCentroidD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SpectralCentroidD",1,"SpectrumAnalyzerD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SpectrumAnalyzerD,0))){
    SWIG_fail_ptr("SpectralCentroidD",1,SWIGTYPE_p_SpectrumAnalyzerD);
  }
  
  result = (double)SpectralCentroidD(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpectralSpread(lua_State* L) {
  int SWIG_arg = 0;
  SpectrumAnalyzer *arg1 = (SpectrumAnalyzer *) 0 ;
  float result;
  
  SWIG_check_num_args("SpectralSpread",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SpectralSpread",1,"SpectrumAnalyzer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SpectrumAnalyzer,0))){
    SWIG_fail_ptr("SpectralSpread",1,SWIGTYPE_p_SpectrumAnalyzer);
  }
  
  result = (float)SpectralSpread(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpectralSpreadD(lua_State* L) {
  int SWIG_arg = 0;
  SpectrumAnalyzerD *arg1 = (SpectrumAnalyzerD *) 0 ;
  double result;
  
  SWIG_check_num_args("SpectralSpreadD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SpectralSpreadD",1,"SpectrumAnalyzerD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SpectrumAnalyzerD,0))){
    SWIG_fail_ptr("SpectralSpreadD",1,SWIGTYPE_p_SpectrumAnalyzerD);
  }
  
  result = (double)SpectralSpreadD(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpectralSkewness(lua_State* L) {
  int SWIG_arg = 0;
  SpectrumAnalyzer *arg1 = (SpectrumAnalyzer *) 0 ;
  float result;
  
  SWIG_check_num_args("SpectralSkewness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SpectralSkewness",1,"SpectrumAnalyzer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SpectrumAnalyzer,0))){
    SWIG_fail_ptr("SpectralSkewness",1,SWIGTYPE_p_SpectrumAnalyzer);
  }
  
  result = (float)SpectralSkewness(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpectralSkewnessD(lua_State* L) {
  int SWIG_arg = 0;
  SpectrumAnalyzerD *arg1 = (SpectrumAnalyzerD *) 0 ;
  double result;
  
  SWIG_check_num_args("SpectralSkewnessD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SpectralSkewnessD",1,"SpectrumAnalyzerD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SpectrumAnalyzerD,0))){
    SWIG_fail_ptr("SpectralSkewnessD",1,SWIGTYPE_p_SpectrumAnalyzerD);
  }
  
  result = (double)SpectralSkewnessD(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpectralKurtosis(lua_State* L) {
  int SWIG_arg = 0;
  SpectrumAnalyzer *arg1 = (SpectrumAnalyzer *) 0 ;
  float result;
  
  SWIG_check_num_args("SpectralKurtosis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SpectralKurtosis",1,"SpectrumAnalyzer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SpectrumAnalyzer,0))){
    SWIG_fail_ptr("SpectralKurtosis",1,SWIGTYPE_p_SpectrumAnalyzer);
  }
  
  result = (float)SpectralKurtosis(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SpectralKurtosisD(lua_State* L) {
  int SWIG_arg = 0;
  SpectrumAnalyzerD *arg1 = (SpectrumAnalyzerD *) 0 ;
  double result;
  
  SWIG_check_num_args("SpectralKurtosisD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SpectralKurtosisD",1,"SpectrumAnalyzerD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SpectrumAnalyzerD,0))){
    SWIG_fail_ptr("SpectralKurtosisD",1,SWIGTYPE_p_SpectrumAnalyzerD);
  }
  
  result = (double)SpectralKurtosisD(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoToMono(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("StereoToMono",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoToMono",1,"float *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoToMono",2,"float const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoToMono",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("StereoToMono",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoToMono",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoToMono",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("StereoToMono",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  StereoToMono(arg1,(float const *)arg2,(float const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoToMonoD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("StereoToMonoD",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("StereoToMonoD",1,"double *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("StereoToMonoD",2,"double const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("StereoToMonoD",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("StereoToMonoD",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoToMonoD",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoToMonoD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("StereoToMonoD",3,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  StereoToMonoD(arg1,(double const *)arg2,(double const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoToStereo(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("MonoToStereo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoToStereo",1,"float *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("MonoToStereo",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoToStereo",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("MonoToStereo",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoToStereo",1,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoToStereo",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MonoToStereo",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  MonoToStereo(arg1,arg2,(float const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MonoToStereoD(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("MonoToStereoD",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("MonoToStereoD",1,"double *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("MonoToStereoD",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("MonoToStereoD",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("MonoToStereoD",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MonoToStereoD",1,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MonoToStereoD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("MonoToStereoD",3,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  MonoToStereoD(arg1,arg2,(double const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TapeInit(lua_State* L) {
  int SWIG_arg = 0;
  TapeSpeed arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Tape *result = 0 ;
  
  SWIG_check_num_args("TapeInit",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TapeInit",1,"TapeSpeed");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TapeInit",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TapeInit",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TapeInit",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("TapeInit",5,"float");
  arg1 = (TapeSpeed)(int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (Tape *)TapeInit(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Tape,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TapeFree(lua_State* L) {
  int SWIG_arg = 0;
  Tape *arg1 = (Tape *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("TapeFree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TapeFree",1,"Tape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Tape,0))){
    SWIG_fail_ptr("TapeFree",1,SWIGTYPE_p_Tape);
  }
  
  result = (Error_t)TapeFree(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TapeSetSpeed(lua_State* L) {
  int SWIG_arg = 0;
  Tape *arg1 = (Tape *) 0 ;
  TapeSpeed arg2 ;
  Error_t result;
  
  SWIG_check_num_args("TapeSetSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TapeSetSpeed",1,"Tape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TapeSetSpeed",2,"TapeSpeed");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Tape,0))){
    SWIG_fail_ptr("TapeSetSpeed",1,SWIGTYPE_p_Tape);
  }
  
  arg2 = (TapeSpeed)(int)lua_tonumber(L, 2);
  result = (Error_t)TapeSetSpeed(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TapeSetSaturation(lua_State* L) {
  int SWIG_arg = 0;
  Tape *arg1 = (Tape *) 0 ;
  float arg2 ;
  Error_t result;
  
  SWIG_check_num_args("TapeSetSaturation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TapeSetSaturation",1,"Tape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TapeSetSaturation",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Tape,0))){
    SWIG_fail_ptr("TapeSetSaturation",1,SWIGTYPE_p_Tape);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (Error_t)TapeSetSaturation(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TapeSetHysteresis(lua_State* L) {
  int SWIG_arg = 0;
  Tape *arg1 = (Tape *) 0 ;
  float arg2 ;
  Error_t result;
  
  SWIG_check_num_args("TapeSetHysteresis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TapeSetHysteresis",1,"Tape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TapeSetHysteresis",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Tape,0))){
    SWIG_fail_ptr("TapeSetHysteresis",1,SWIGTYPE_p_Tape);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (Error_t)TapeSetHysteresis(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TapeSetFlutter(lua_State* L) {
  int SWIG_arg = 0;
  Tape *arg1 = (Tape *) 0 ;
  float arg2 ;
  Error_t result;
  
  SWIG_check_num_args("TapeSetFlutter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TapeSetFlutter",1,"Tape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TapeSetFlutter",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Tape,0))){
    SWIG_fail_ptr("TapeSetFlutter",1,SWIGTYPE_p_Tape);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (Error_t)TapeSetFlutter(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TapeGetSaturation(lua_State* L) {
  int SWIG_arg = 0;
  Tape *arg1 = (Tape *) 0 ;
  float result;
  
  SWIG_check_num_args("TapeGetSaturation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TapeGetSaturation",1,"Tape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Tape,0))){
    SWIG_fail_ptr("TapeGetSaturation",1,SWIGTYPE_p_Tape);
  }
  
  result = (float)TapeGetSaturation(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TapeGetHysteresis(lua_State* L) {
  int SWIG_arg = 0;
  Tape *arg1 = (Tape *) 0 ;
  float result;
  
  SWIG_check_num_args("TapeGetHysteresis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TapeGetHysteresis",1,"Tape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Tape,0))){
    SWIG_fail_ptr("TapeGetHysteresis",1,SWIGTYPE_p_Tape);
  }
  
  result = (float)TapeGetHysteresis(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TapeProcess(lua_State* L) {
  int SWIG_arg = 0;
  Tape *arg1 = (Tape *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("TapeProcess",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TapeProcess",1,"Tape *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TapeProcess",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TapeProcess",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TapeProcess",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Tape,0))){
    SWIG_fail_ptr("TapeProcess",1,SWIGTYPE_p_Tape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("TapeProcess",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("TapeProcess",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)TapeProcess(arg1,arg2,(float const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TapeTick(lua_State* L) {
  int SWIG_arg = 0;
  Tape *arg1 = (Tape *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("TapeTick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TapeTick",1,"Tape *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TapeTick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Tape,0))){
    SWIG_fail_ptr("TapeTick",1,SWIGTYPE_p_Tape);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)TapeTick(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UpsamplerInit(lua_State* L) {
  int SWIG_arg = 0;
  ResampleFactor_t arg1 ;
  Upsampler *result = 0 ;
  
  SWIG_check_num_args("UpsamplerInit",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("UpsamplerInit",1,"ResampleFactor_t");
  arg1 = (ResampleFactor_t)(int)lua_tonumber(L, 1);
  result = (Upsampler *)UpsamplerInit(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Upsampler,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UpsamplerInitD(lua_State* L) {
  int SWIG_arg = 0;
  ResampleFactor_t arg1 ;
  UpsamplerD *result = 0 ;
  
  SWIG_check_num_args("UpsamplerInitD",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("UpsamplerInitD",1,"ResampleFactor_t");
  arg1 = (ResampleFactor_t)(int)lua_tonumber(L, 1);
  result = (UpsamplerD *)UpsamplerInitD(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_UpsamplerD,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UpsamplerFree(lua_State* L) {
  int SWIG_arg = 0;
  Upsampler *arg1 = (Upsampler *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("UpsamplerFree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UpsamplerFree",1,"Upsampler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Upsampler,0))){
    SWIG_fail_ptr("UpsamplerFree",1,SWIGTYPE_p_Upsampler);
  }
  
  result = (Error_t)UpsamplerFree(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UpsamplerFreeD(lua_State* L) {
  int SWIG_arg = 0;
  UpsamplerD *arg1 = (UpsamplerD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("UpsamplerFreeD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UpsamplerFreeD",1,"UpsamplerD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UpsamplerD,0))){
    SWIG_fail_ptr("UpsamplerFreeD",1,SWIGTYPE_p_UpsamplerD);
  }
  
  result = (Error_t)UpsamplerFreeD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UpsamplerFlush(lua_State* L) {
  int SWIG_arg = 0;
  Upsampler *arg1 = (Upsampler *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("UpsamplerFlush",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UpsamplerFlush",1,"Upsampler *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Upsampler,0))){
    SWIG_fail_ptr("UpsamplerFlush",1,SWIGTYPE_p_Upsampler);
  }
  
  result = (Error_t)UpsamplerFlush(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UpsamplerFlushD(lua_State* L) {
  int SWIG_arg = 0;
  UpsamplerD *arg1 = (UpsamplerD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("UpsamplerFlushD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UpsamplerFlushD",1,"UpsamplerD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UpsamplerD,0))){
    SWIG_fail_ptr("UpsamplerFlushD",1,SWIGTYPE_p_UpsamplerD);
  }
  
  result = (Error_t)UpsamplerFlushD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UpsamplerProcess(lua_State* L) {
  int SWIG_arg = 0;
  Upsampler *arg1 = (Upsampler *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("UpsamplerProcess",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UpsamplerProcess",1,"Upsampler *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("UpsamplerProcess",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("UpsamplerProcess",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("UpsamplerProcess",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Upsampler,0))){
    SWIG_fail_ptr("UpsamplerProcess",1,SWIGTYPE_p_Upsampler);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("UpsamplerProcess",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("UpsamplerProcess",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)UpsamplerProcess(arg1,arg2,(float const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UpsamplerProcessD(lua_State* L) {
  int SWIG_arg = 0;
  UpsamplerD *arg1 = (UpsamplerD *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("UpsamplerProcessD",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("UpsamplerProcessD",1,"UpsamplerD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("UpsamplerProcessD",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("UpsamplerProcessD",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("UpsamplerProcessD",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_UpsamplerD,0))){
    SWIG_fail_ptr("UpsamplerProcessD",1,SWIGTYPE_p_UpsamplerD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("UpsamplerProcessD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("UpsamplerProcessD",3,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)UpsamplerProcessD(arg1,arg2,(double const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("log2",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log2",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)log2(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2f(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("log2f",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log2f",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)log2f(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_next_pow2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("next_pow2",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("next_pow2",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)next_pow2(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_f_abs(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("f_abs",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("f_abs",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)f_abs(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_f_max(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("f_max",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("f_max",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("f_max",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)f_max(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_f_min(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("f_min",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("f_min",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("f_min",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)f_min(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_f_clamp(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("f_clamp",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("f_clamp",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("f_clamp",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("f_clamp",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)f_clamp(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_f_pow2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("f_pow2",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("f_pow2",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)f_pow2(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_f_tanh(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("f_tanh",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("f_tanh",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)f_tanh(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int16ToFloat(lua_State* L) {
  int SWIG_arg = 0;
  short arg1 ;
  float result;
  
  SWIG_check_num_args("int16ToFloat",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("int16ToFloat",1,"short");
  arg1 = (short)lua_tonumber(L, 1);
  result = (float)int16ToFloat(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floatToInt16(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  short result;
  
  SWIG_check_num_args("floatToInt16",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("floatToInt16",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (short)floatToInt16(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AmpToDb(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("AmpToDb",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AmpToDb",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)AmpToDb(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AmpToDbD(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("AmpToDbD",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("AmpToDbD",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)AmpToDbD(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DbToAmp(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float result;
  
  SWIG_check_num_args("DbToAmp",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DbToAmp",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (float)DbToAmp(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DbToAmpD(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("DbToAmpD",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DbToAmpD",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)DbToAmpD(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RectToPolar(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("RectToPolar",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("RectToPolar",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RectToPolar",2,"float");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("RectToPolar",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("RectToPolar",4,"float *");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RectToPolar",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("RectToPolar",4,SWIGTYPE_p_float);
  }
  
  RectToPolar(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RectToPolarD(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("RectToPolarD",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("RectToPolarD",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RectToPolarD",2,"double");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("RectToPolarD",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("RectToPolarD",4,"double *");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RectToPolarD",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("RectToPolarD",4,SWIGTYPE_p_double);
  }
  
  RectToPolarD(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolarToRect(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("PolarToRect",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("PolarToRect",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PolarToRect",2,"float");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("PolarToRect",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("PolarToRect",4,"float *");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("PolarToRect",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("PolarToRect",4,SWIGTYPE_p_float);
  }
  
  PolarToRect(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PolarToRectD(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("PolarToRectD",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("PolarToRectD",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("PolarToRectD",2,"double");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("PolarToRectD",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("PolarToRectD",4,"double *");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("PolarToRectD",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("PolarToRectD",4,SWIGTYPE_p_double);
  }
  
  PolarToRectD(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_boxcar(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  float *arg2 = (float *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("boxcar",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("boxcar",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("boxcar",2,"float *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("boxcar",2,SWIGTYPE_p_float);
  }
  
  result = (Error_t)boxcar(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_boxcarD(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  double *arg2 = (double *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("boxcarD",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("boxcarD",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("boxcarD",2,"double *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("boxcarD",2,SWIGTYPE_p_double);
  }
  
  result = (Error_t)boxcarD(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hann(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  float *arg2 = (float *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("hann",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("hann",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("hann",2,"float *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("hann",2,SWIGTYPE_p_float);
  }
  
  result = (Error_t)hann(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hannD(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  double *arg2 = (double *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("hannD",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("hannD",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("hannD",2,"double *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("hannD",2,SWIGTYPE_p_double);
  }
  
  result = (Error_t)hannD(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hamming(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  float *arg2 = (float *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("hamming",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("hamming",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("hamming",2,"float *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("hamming",2,SWIGTYPE_p_float);
  }
  
  result = (Error_t)hamming(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hammingD(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  double *arg2 = (double *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("hammingD",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("hammingD",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("hammingD",2,"double *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("hammingD",2,SWIGTYPE_p_double);
  }
  
  result = (Error_t)hammingD(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blackman(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  float arg2 ;
  float *arg3 = (float *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("blackman",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("blackman",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("blackman",2,"float");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("blackman",3,"float *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("blackman",3,SWIGTYPE_p_float);
  }
  
  result = (Error_t)blackman(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blackmanD(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("blackmanD",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("blackmanD",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("blackmanD",2,"double");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("blackmanD",3,"double *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("blackmanD",3,SWIGTYPE_p_double);
  }
  
  result = (Error_t)blackmanD(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tukey(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  float arg2 ;
  float *arg3 = (float *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("tukey",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tukey",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("tukey",2,"float");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("tukey",3,"float *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("tukey",3,SWIGTYPE_p_float);
  }
  
  result = (Error_t)tukey(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tukeyD(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("tukeyD",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tukeyD",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("tukeyD",2,"double");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("tukeyD",3,"double *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("tukeyD",3,SWIGTYPE_p_double);
  }
  
  result = (Error_t)tukeyD(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosine(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  float *arg2 = (float *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("cosine",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cosine",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cosine",2,"float *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("cosine",2,SWIGTYPE_p_float);
  }
  
  result = (Error_t)cosine(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosineD(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  double *arg2 = (double *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("cosineD",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cosineD",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("cosineD",2,"double *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("cosineD",2,SWIGTYPE_p_double);
  }
  
  result = (Error_t)cosineD(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lanczos(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  float *arg2 = (float *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("lanczos",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lanczos",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("lanczos",2,"float *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("lanczos",2,SWIGTYPE_p_float);
  }
  
  result = (Error_t)lanczos(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lanczosD(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  double *arg2 = (double *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("lanczosD",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lanczosD",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("lanczosD",2,"double *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("lanczosD",2,SWIGTYPE_p_double);
  }
  
  result = (Error_t)lanczosD(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bartlett(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  float *arg2 = (float *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("bartlett",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("bartlett",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("bartlett",2,"float *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("bartlett",2,SWIGTYPE_p_float);
  }
  
  result = (Error_t)bartlett(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bartlettD(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  double *arg2 = (double *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("bartlettD",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("bartlettD",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("bartlettD",2,"double *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("bartlettD",2,SWIGTYPE_p_double);
  }
  
  result = (Error_t)bartlettD(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gaussian(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  float arg2 ;
  float *arg3 = (float *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("gaussian",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gaussian",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gaussian",2,"float");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("gaussian",3,"float *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("gaussian",3,SWIGTYPE_p_float);
  }
  
  result = (Error_t)gaussian(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gaussianD(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("gaussianD",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("gaussianD",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("gaussianD",2,"double");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("gaussianD",3,"double *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("gaussianD",3,SWIGTYPE_p_double);
  }
  
  result = (Error_t)gaussianD(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bartlett_hann(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  float *arg2 = (float *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("bartlett_hann",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("bartlett_hann",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("bartlett_hann",2,"float *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("bartlett_hann",2,SWIGTYPE_p_float);
  }
  
  result = (Error_t)bartlett_hann(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bartlett_hannD(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  double *arg2 = (double *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("bartlett_hannD",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("bartlett_hannD",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("bartlett_hannD",2,"double *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("bartlett_hannD",2,SWIGTYPE_p_double);
  }
  
  result = (Error_t)bartlett_hannD(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kaiser(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  float arg2 ;
  float *arg3 = (float *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("kaiser",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kaiser",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kaiser",2,"float");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("kaiser",3,"float *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("kaiser",3,SWIGTYPE_p_float);
  }
  
  result = (Error_t)kaiser(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_kaiserD(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("kaiserD",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kaiserD",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kaiserD",2,"double");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("kaiserD",3,"double *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("kaiserD",3,SWIGTYPE_p_double);
  }
  
  result = (Error_t)kaiserD(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nuttall(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  float *arg2 = (float *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("nuttall",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nuttall",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("nuttall",2,"float *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("nuttall",2,SWIGTYPE_p_float);
  }
  
  result = (Error_t)nuttall(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nuttallD(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  double *arg2 = (double *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("nuttallD",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nuttallD",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("nuttallD",2,"double *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("nuttallD",2,SWIGTYPE_p_double);
  }
  
  result = (Error_t)nuttallD(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blackman_harris(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  float *arg2 = (float *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("blackman_harris",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("blackman_harris",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("blackman_harris",2,"float *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("blackman_harris",2,SWIGTYPE_p_float);
  }
  
  result = (Error_t)blackman_harris(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blackman_harrisD(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  double *arg2 = (double *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("blackman_harrisD",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("blackman_harrisD",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("blackman_harrisD",2,"double *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("blackman_harrisD",2,SWIGTYPE_p_double);
  }
  
  result = (Error_t)blackman_harrisD(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blackman_nuttall(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  float *arg2 = (float *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("blackman_nuttall",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("blackman_nuttall",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("blackman_nuttall",2,"float *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("blackman_nuttall",2,SWIGTYPE_p_float);
  }
  
  result = (Error_t)blackman_nuttall(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_blackman_nuttallD(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  double *arg2 = (double *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("blackman_nuttallD",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("blackman_nuttallD",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("blackman_nuttallD",2,"double *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("blackman_nuttallD",2,SWIGTYPE_p_double);
  }
  
  result = (Error_t)blackman_nuttallD(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_flat_top(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  float *arg2 = (float *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("flat_top",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("flat_top",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("flat_top",2,"float *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("flat_top",2,SWIGTYPE_p_float);
  }
  
  result = (Error_t)flat_top(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_flat_topD(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  double *arg2 = (double *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("flat_topD",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("flat_topD",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("flat_topD",2,"double *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("flat_topD",2,SWIGTYPE_p_double);
  }
  
  result = (Error_t)flat_topD(arg1,arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_poisson(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  float arg2 ;
  float *arg3 = (float *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("poisson",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("poisson",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("poisson",2,"float");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("poisson",3,"float *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("poisson",3,SWIGTYPE_p_float);
  }
  
  result = (Error_t)poisson(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_poissonD(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("poissonD",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("poissonD",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("poissonD",2,"double");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("poissonD",3,"double *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("poissonD",3,SWIGTYPE_p_double);
  }
  
  result = (Error_t)poissonD(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  float arg2 ;
  float *arg3 = (float *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("chebyshev",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("chebyshev",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("chebyshev",2,"float");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("chebyshev",3,"float *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("chebyshev",3,SWIGTYPE_p_float);
  }
  
  result = (Error_t)chebyshev(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshevD(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("chebyshevD",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("chebyshevD",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("chebyshevD",2,"double");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("chebyshevD",3,"double *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("chebyshevD",3,SWIGTYPE_p_double);
  }
  
  result = (Error_t)chebyshevD(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowFunctionInit(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  Window_t arg2 ;
  WindowFunction *result = 0 ;
  
  SWIG_check_num_args("WindowFunctionInit",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("WindowFunctionInit",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("WindowFunctionInit",2,"Window_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (Window_t)(int)lua_tonumber(L, 2);
  result = (WindowFunction *)WindowFunctionInit(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WindowFunction,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowFunctionInitD(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  Window_t arg2 ;
  WindowFunctionD *result = 0 ;
  
  SWIG_check_num_args("WindowFunctionInitD",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("WindowFunctionInitD",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("WindowFunctionInitD",2,"Window_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (Window_t)(int)lua_tonumber(L, 2);
  result = (WindowFunctionD *)WindowFunctionInitD(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_WindowFunctionD,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowFunctionFree(lua_State* L) {
  int SWIG_arg = 0;
  WindowFunction *arg1 = (WindowFunction *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("WindowFunctionFree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WindowFunctionFree",1,"WindowFunction *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WindowFunction,0))){
    SWIG_fail_ptr("WindowFunctionFree",1,SWIGTYPE_p_WindowFunction);
  }
  
  result = (Error_t)WindowFunctionFree(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowFunctionFreeD(lua_State* L) {
  int SWIG_arg = 0;
  WindowFunctionD *arg1 = (WindowFunctionD *) 0 ;
  Error_t result;
  
  SWIG_check_num_args("WindowFunctionFreeD",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WindowFunctionFreeD",1,"WindowFunctionD *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WindowFunctionD,0))){
    SWIG_fail_ptr("WindowFunctionFreeD",1,SWIGTYPE_p_WindowFunctionD);
  }
  
  result = (Error_t)WindowFunctionFreeD(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowFunctionProcess(lua_State* L) {
  int SWIG_arg = 0;
  WindowFunction *arg1 = (WindowFunction *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("WindowFunctionProcess",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WindowFunctionProcess",1,"WindowFunction *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("WindowFunctionProcess",2,"float *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("WindowFunctionProcess",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("WindowFunctionProcess",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WindowFunction,0))){
    SWIG_fail_ptr("WindowFunctionProcess",1,SWIGTYPE_p_WindowFunction);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("WindowFunctionProcess",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("WindowFunctionProcess",3,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)WindowFunctionProcess(arg1,arg2,(float const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WindowFunctionProcessD(lua_State* L) {
  int SWIG_arg = 0;
  WindowFunctionD *arg1 = (WindowFunctionD *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int arg4 ;
  Error_t result;
  
  SWIG_check_num_args("WindowFunctionProcessD",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("WindowFunctionProcessD",1,"WindowFunctionD *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("WindowFunctionProcessD",2,"double *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("WindowFunctionProcessD",3,"double const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("WindowFunctionProcessD",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_WindowFunctionD,0))){
    SWIG_fail_ptr("WindowFunctionProcessD",1,SWIGTYPE_p_WindowFunctionD);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("WindowFunctionProcessD",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("WindowFunctionProcessD",3,SWIGTYPE_p_double);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (Error_t)WindowFunctionProcessD(arg1,arg2,(double const *)arg3,arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_SwigModule_attributes[] = {
    { "BOLTZMANS_CONSTANT", _wrap_BOLTZMANS_CONSTANT_get, SWIG_Lua_set_immutable },
    { "Q", _wrap_Q_get, SWIG_Lua_set_immutable },
    { "PolyphaseCoeffs", _wrap_PolyphaseCoeffs_get, _wrap_PolyphaseCoeffs_set },
    { "PolyphaseCoeffsD", _wrap_PolyphaseCoeffsD_get, _wrap_PolyphaseCoeffsD_set },
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("FORWARD_BIAS", FORWARD_BIAS)},
    {SWIG_LUA_CONSTTAB_INT("REVERSE_BIAS", REVERSE_BIAS)},
    {SWIG_LUA_CONSTTAB_INT("FULL_WAVE", FULL_WAVE)},
    {SWIG_LUA_CONSTTAB_INT("NOERR", NOERR)},
    {SWIG_LUA_CONSTTAB_INT("ERROR", ERROR)},
    {SWIG_LUA_CONSTTAB_INT("NULL_PTR_ERROR", NULL_PTR_ERROR)},
    {SWIG_LUA_CONSTTAB_INT("VALUE_ERROR", VALUE_ERROR)},
    {SWIG_LUA_CONSTTAB_INT("N_ERRORS", N_ERRORS)},
    {SWIG_LUA_CONSTTAB_INT("LOWPASS", LOWPASS)},
    {SWIG_LUA_CONSTTAB_INT("HIGHPASS", HIGHPASS)},
    {SWIG_LUA_CONSTTAB_INT("BANDPASS", BANDPASS)},
    {SWIG_LUA_CONSTTAB_INT("ALLPASS", ALLPASS)},
    {SWIG_LUA_CONSTTAB_INT("NOTCH", NOTCH)},
    {SWIG_LUA_CONSTTAB_INT("PEAK", PEAK)},
    {SWIG_LUA_CONSTTAB_INT("LOW_SHELF", LOW_SHELF)},
    {SWIG_LUA_CONSTTAB_INT("HIGH_SHELF", HIGH_SHELF)},
    {SWIG_LUA_CONSTTAB_INT("N_FILTER_TYPES", N_FILTER_TYPES)},
    {SWIG_LUA_CONSTTAB_INT("USE_FFT_CONVOLUTION_LENGTH", (128))},
    {SWIG_LUA_CONSTTAB_INT("BEST", BEST)},
    {SWIG_LUA_CONSTTAB_INT("DIRECT", DIRECT)},
    {SWIG_LUA_CONSTTAB_INT("FFT", FFT)},
    {SWIG_LUA_CONSTTAB_INT("FULL_SCALE", FULL_SCALE)},
    {SWIG_LUA_CONSTTAB_INT("K_12", K_12)},
    {SWIG_LUA_CONSTTAB_INT("K_14", K_14)},
    {SWIG_LUA_CONSTTAB_INT("K_20", K_20)},
    {SWIG_LUA_CONSTTAB_INT("OPTO_LDR", OPTO_LDR)},
    {SWIG_LUA_CONSTTAB_INT("OPTO_PHOTOTRANSISTOR", OPTO_PHOTOTRANSISTOR)},
    {SWIG_LUA_CONSTTAB_INT("X2", X2)},
    {SWIG_LUA_CONSTTAB_INT("X4", X4)},
    {SWIG_LUA_CONSTTAB_INT("X8", X8)},
    {SWIG_LUA_CONSTTAB_INT("N_FACTORS", N_FACTORS)},
    {SWIG_LUA_CONSTTAB_INT("TS_3_75IPS", TS_3_75IPS)},
    {SWIG_LUA_CONSTTAB_INT("TS_7_5IPS", TS_7_5IPS)},
    {SWIG_LUA_CONSTTAB_INT("TS_15IPS", TS_15IPS)},
    {SWIG_LUA_CONSTTAB_INT("TS_30IPS", TS_30IPS)},
    {SWIG_LUA_CONSTTAB_FLOAT("INT16_TO_FLOAT_SCALAR", (0.00003051850947599719))},
    {SWIG_LUA_CONSTTAB_FLOAT("INV_LN2", (1.442695040888963))},
    {SWIG_LUA_CONSTTAB_FLOAT("TWO_PI", (6.283185307179586))},
    {SWIG_LUA_CONSTTAB_FLOAT("PI_OVER_TWO", (1.5707963267948966))},
    {SWIG_LUA_CONSTTAB_FLOAT("INVERSE_TWO_PI", (0.159154943091895))},
    {SWIG_LUA_CONSTTAB_FLOAT("LOG_TEN_OVER_TWENTY", (0.11512925464970228420089957273422))},
    {SWIG_LUA_CONSTTAB_FLOAT("TWENTY_OVER_LOG_TEN", (8.6858896380650365530225783783321))},
    {SWIG_LUA_CONSTTAB_FLOAT("SQRT_TWO_OVER_TWO", (0.70710678118654757273731092936941422522068023681641))},
    {SWIG_LUA_CONSTTAB_INT("BOXCAR", BOXCAR)},
    {SWIG_LUA_CONSTTAB_INT("HANN", HANN)},
    {SWIG_LUA_CONSTTAB_INT("HAMMING", HAMMING)},
    {SWIG_LUA_CONSTTAB_INT("BLACKMAN", BLACKMAN)},
    {SWIG_LUA_CONSTTAB_INT("TUKEY", TUKEY)},
    {SWIG_LUA_CONSTTAB_INT("COSINE", COSINE)},
    {SWIG_LUA_CONSTTAB_INT("LANCZOS", LANCZOS)},
    {SWIG_LUA_CONSTTAB_INT("BARTLETT", BARTLETT)},
    {SWIG_LUA_CONSTTAB_INT("GAUSSIAN", GAUSSIAN)},
    {SWIG_LUA_CONSTTAB_INT("BARTLETT_HANN", BARTLETT_HANN)},
    {SWIG_LUA_CONSTTAB_INT("KAISER", KAISER)},
    {SWIG_LUA_CONSTTAB_INT("NUTTALL", NUTTALL)},
    {SWIG_LUA_CONSTTAB_INT("BLACKMAN_HARRIS", BLACKMAN_HARRIS)},
    {SWIG_LUA_CONSTTAB_INT("BLACKMAN_NUTTALL", BLACKMAN_NUTTALL)},
    {SWIG_LUA_CONSTTAB_INT("FLATTOP", FLATTOP)},
    {SWIG_LUA_CONSTTAB_INT("POISSON", POISSON)},
    {SWIG_LUA_CONSTTAB_INT("N_WINDOWTYPES", N_WINDOWTYPES)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "BiquadFilterInit", _wrap_BiquadFilterInit},
    { "BiquadFilterInitD", _wrap_BiquadFilterInitD},
    { "BiquadFilterFree", _wrap_BiquadFilterFree},
    { "BiquadFilterFreeD", _wrap_BiquadFilterFreeD},
    { "BiquadFilterFlush", _wrap_BiquadFilterFlush},
    { "BiquadFilterFlushD", _wrap_BiquadFilterFlushD},
    { "BiquadFilterProcess", _wrap_BiquadFilterProcess},
    { "BiquadFilterProcessD", _wrap_BiquadFilterProcessD},
    { "BiquadFilterTick", _wrap_BiquadFilterTick},
    { "BiquadFilterTickD", _wrap_BiquadFilterTickD},
    { "BiquadFilterUpdateKernel", _wrap_BiquadFilterUpdateKernel},
    { "BiquadFilterUpdateKernelD", _wrap_BiquadFilterUpdateKernelD},
    { "KWeightingFilterInit", _wrap_KWeightingFilterInit},
    { "KWeightingFilterInitD", _wrap_KWeightingFilterInitD},
    { "KWeightingFilterProcess", _wrap_KWeightingFilterProcess},
    { "KWeightingFilterProcessD", _wrap_KWeightingFilterProcessD},
    { "KWeightingFilterFlush", _wrap_KWeightingFilterFlush},
    { "KWeightingFilterFlushD", _wrap_KWeightingFilterFlushD},
    { "KWeightingFilterFree", _wrap_KWeightingFilterFree},
    { "KWeightingFilterFreeD", _wrap_KWeightingFilterFreeD},
    { "BS1770MeterInit", _wrap_BS1770MeterInit},
    { "BS1770MeterInitD", _wrap_BS1770MeterInitD},
    { "BS1770MeterProcess", _wrap_BS1770MeterProcess},
    { "BS1770MeterProcessD", _wrap_BS1770MeterProcessD},
    { "BS1770MeterFree", _wrap_BS1770MeterFree},
    { "BS1770MeterFreeD", _wrap_BS1770MeterFreeD},
    { "CircularBufferInit", _wrap_CircularBufferInit},
    { "CircularBufferInitD", _wrap_CircularBufferInitD},
    { "CircularBufferFree", _wrap_CircularBufferFree},
    { "CircularBufferFreeD", _wrap_CircularBufferFreeD},
    { "CircularBufferWrite", _wrap_CircularBufferWrite},
    { "CircularBufferWriteD", _wrap_CircularBufferWriteD},
    { "CircularBufferRead", _wrap_CircularBufferRead},
    { "CircularBufferReadD", _wrap_CircularBufferReadD},
    { "CircularBufferFlush", _wrap_CircularBufferFlush},
    { "CircularBufferFlushD", _wrap_CircularBufferFlushD},
    { "CircularBufferRewind", _wrap_CircularBufferRewind},
    { "CircularBufferRewindD", _wrap_CircularBufferRewindD},
    { "CircularBufferCount", _wrap_CircularBufferCount},
    { "CircularBufferCountD", _wrap_CircularBufferCountD},
    { "DecimatorInit", _wrap_DecimatorInit},
    { "DecimatorInitD", _wrap_DecimatorInitD},
    { "DecimatorFree", _wrap_DecimatorFree},
    { "DecimatorFreeD", _wrap_DecimatorFreeD},
    { "DecimatorFlush", _wrap_DecimatorFlush},
    { "DecimatorFlushD", _wrap_DecimatorFlushD},
    { "DecimatorProcess", _wrap_DecimatorProcess},
    { "DecimatorProcessD", _wrap_DecimatorProcessD},
    { "DiodeRectifierInit", _wrap_DiodeRectifierInit},
    { "DiodeRectifierInitD", _wrap_DiodeRectifierInitD},
    { "DiodeRectifierFree", _wrap_DiodeRectifierFree},
    { "DiodeRectifierFreeD", _wrap_DiodeRectifierFreeD},
    { "DiodeRectifierSetThreshold", _wrap_DiodeRectifierSetThreshold},
    { "DiodeRectifierSetThresholdD", _wrap_DiodeRectifierSetThresholdD},
    { "DiodeRectifierProcess", _wrap_DiodeRectifierProcess},
    { "DiodeRectifierProcessD", _wrap_DiodeRectifierProcessD},
    { "DiodeRectifierTick", _wrap_DiodeRectifierTick},
    { "DiodeRectifierTickD", _wrap_DiodeRectifierTickD},
    { "DiodeSaturatorInit", _wrap_DiodeSaturatorInit},
    { "DiodeSaturatorInitD", _wrap_DiodeSaturatorInitD},
    { "DiodeSaturatorFree", _wrap_DiodeSaturatorFree},
    { "DiodeSaturatorFreeD", _wrap_DiodeSaturatorFreeD},
    { "DiodeSaturatorSetAmount", _wrap_DiodeSaturatorSetAmount},
    { "DiodeSaturatorSetAmountD", _wrap_DiodeSaturatorSetAmountD},
    { "DiodeSaturatorProcess", _wrap_DiodeSaturatorProcess},
    { "DiodeSaturatorProcessD", _wrap_DiodeSaturatorProcessD},
    { "DiodeSaturatorTick", _wrap_DiodeSaturatorTick},
    { "DiodeSaturatorTickD", _wrap_DiodeSaturatorTickD},
    { "FloatBufferToInt16", _wrap_FloatBufferToInt16},
    { "DoubleBufferToInt16", _wrap_DoubleBufferToInt16},
    { "Int16BufferToFloat", _wrap_Int16BufferToFloat},
    { "Int16BufferToDouble", _wrap_Int16BufferToDouble},
    { "DoubleToFloat", _wrap_DoubleToFloat},
    { "FloatToDouble", _wrap_FloatToDouble},
    { "FillBuffer", _wrap_FillBuffer},
    { "FillBufferD", _wrap_FillBufferD},
    { "ClearBuffer", _wrap_ClearBuffer},
    { "ClearBufferD", _wrap_ClearBufferD},
    { "CopyBuffer", _wrap_CopyBuffer},
    { "CopyBufferD", _wrap_CopyBufferD},
    { "CopyBufferStride", _wrap_CopyBufferStride},
    { "CopyBufferStrideD", _wrap_CopyBufferStrideD},
    { "SplitToInterleaved", _wrap_SplitToInterleaved},
    { "SplitToInterleavedD", _wrap_SplitToInterleavedD},
    { "InterleavedToSplit", _wrap_InterleavedToSplit},
    { "InterleavedToSplitD", _wrap_InterleavedToSplitD},
    { "VectorAbs", _wrap_VectorAbs},
    { "VectorAbsD", _wrap_VectorAbsD},
    { "VectorNegate", _wrap_VectorNegate},
    { "VectorNegateD", _wrap_VectorNegateD},
    { "VectorSum", _wrap_VectorSum},
    { "VectorSumD", _wrap_VectorSumD},
    { "VectorMax", _wrap_VectorMax},
    { "VectorMaxD", _wrap_VectorMaxD},
    { "VectorMaxVI", _wrap_VectorMaxVI},
    { "VectorMaxVID", _wrap_VectorMaxVID},
    { "VectorMin", _wrap_VectorMin},
    { "VectorMinD", _wrap_VectorMinD},
    { "VectorMinVI", _wrap_VectorMinVI},
    { "VectorMinVID", _wrap_VectorMinVID},
    { "VectorVectorAdd", _wrap_VectorVectorAdd},
    { "VectorVectorAddD", _wrap_VectorVectorAddD},
    { "VectorVectorSub", _wrap_VectorVectorSub},
    { "VectorVectorSubD", _wrap_VectorVectorSubD},
    { "VectorScalarAdd", _wrap_VectorScalarAdd},
    { "VectorScalarAddD", _wrap_VectorScalarAddD},
    { "VectorVectorMultiply", _wrap_VectorVectorMultiply},
    { "VectorVectorMultiplyD", _wrap_VectorVectorMultiplyD},
    { "VectorScalarMultiply", _wrap_VectorScalarMultiply},
    { "VectorScalarMultiplyD", _wrap_VectorScalarMultiplyD},
    { "VectorVectorMix", _wrap_VectorVectorMix},
    { "VectorVectorMixD", _wrap_VectorVectorMixD},
    { "VectorVectorSumScale", _wrap_VectorVectorSumScale},
    { "VectorVectorSumScaleD", _wrap_VectorVectorSumScaleD},
    { "VectorPower", _wrap_VectorPower},
    { "VectorPowerD", _wrap_VectorPowerD},
    { "Convolve", _wrap_Convolve},
    { "ConvolveD", _wrap_ConvolveD},
    { "VectorDbConvert", _wrap_VectorDbConvert},
    { "VectorDbConvertD", _wrap_VectorDbConvertD},
    { "ComplexMultiply", _wrap_ComplexMultiply},
    { "ComplexMultiplyD", _wrap_ComplexMultiplyD},
    { "VectorRectToPolar", _wrap_VectorRectToPolar},
    { "VectorRectToPolarD", _wrap_VectorRectToPolarD},
    { "MeanSquare", _wrap_MeanSquare},
    { "MeanSquareD", _wrap_MeanSquareD},
    { "FFTInit", _wrap_FFTInit},
    { "FFTInitD", _wrap_FFTInitD},
    { "FFTFree", _wrap_FFTFree},
    { "FFTFreeD", _wrap_FFTFreeD},
    { "FFT_R2C", _wrap_FFT_R2C},
    { "FFT_R2CD", _wrap_FFT_R2CD},
    { "FFT_IR_R2C", _wrap_FFT_IR_R2C},
    { "FFT_IR_R2CD", _wrap_FFT_IR_R2CD},
    { "IFFT_C2R", _wrap_IFFT_C2R},
    { "IFFT_C2RD", _wrap_IFFT_C2RD},
    { "FFTConvolve", _wrap_FFTConvolve},
    { "FFTConvolveD", _wrap_FFTConvolveD},
    { "FFTFilterConvolve", _wrap_FFTFilterConvolve},
    { "FFTFilterConvolveD", _wrap_FFTFilterConvolveD},
    { "FIRFilterInit", _wrap_FIRFilterInit},
    { "FIRFilterInitD", _wrap_FIRFilterInitD},
    { "FIRFilterFree", _wrap_FIRFilterFree},
    { "FIRFilterFreeD", _wrap_FIRFilterFreeD},
    { "FIRFilterFlush", _wrap_FIRFilterFlush},
    { "FIRFilterFlushD", _wrap_FIRFilterFlushD},
    { "FIRFilterProcess", _wrap_FIRFilterProcess},
    { "FIRFilterProcessD", _wrap_FIRFilterProcessD},
    { "FIRFilterUpdateKernel", _wrap_FIRFilterUpdateKernel},
    { "FIRFilterUpdateKernelD", _wrap_FIRFilterUpdateKernelD},
    { "LadderFilterInit", _wrap_LadderFilterInit},
    { "LadderFilterFree", _wrap_LadderFilterFree},
    { "LadderFilterFlush", _wrap_LadderFilterFlush},
    { "LadderFilterProcess", _wrap_LadderFilterProcess},
    { "LadderFilterSetCutoff", _wrap_LadderFilterSetCutoff},
    { "LadderFilterSetResonance", _wrap_LadderFilterSetResonance},
    { "LadderFilterSetTemperature", _wrap_LadderFilterSetTemperature},
    { "LRFilterInit", _wrap_LRFilterInit},
    { "LRFilterInitD", _wrap_LRFilterInitD},
    { "LRFilterFree", _wrap_LRFilterFree},
    { "LRFilterFreeD", _wrap_LRFilterFreeD},
    { "LRFilterFlush", _wrap_LRFilterFlush},
    { "LRFilterFlushD", _wrap_LRFilterFlushD},
    { "LRFilterSetParams", _wrap_LRFilterSetParams},
    { "LRFilterSetParamsD", _wrap_LRFilterSetParamsD},
    { "LRFilterProcess", _wrap_LRFilterProcess},
    { "LRFilterProcessD", _wrap_LRFilterProcessD},
    { "phase_correlation", _wrap_phase_correlation},
    { "phase_correlationD", _wrap_phase_correlationD},
    { "balance", _wrap_balance},
    { "balanceD", _wrap_balanceD},
    { "vu_peak", _wrap_vu_peak},
    { "vu_peakD", _wrap_vu_peakD},
    { "midiNoteToFrequency", _wrap_midiNoteToFrequency},
    { "frequencyToMidiNote", _wrap_frequencyToMidiNote},
    { "MultibandFilterInit", _wrap_MultibandFilterInit},
    { "MultibandFilterInitD", _wrap_MultibandFilterInitD},
    { "MultibandFilterFree", _wrap_MultibandFilterFree},
    { "MultibandFilterFreeD", _wrap_MultibandFilterFreeD},
    { "MultibandFilterFlush", _wrap_MultibandFilterFlush},
    { "MultibandFilterFlushD", _wrap_MultibandFilterFlushD},
    { "MultibandFilterSetLowCutoff", _wrap_MultibandFilterSetLowCutoff},
    { "MultibandFilterSetLowCutoffD", _wrap_MultibandFilterSetLowCutoffD},
    { "MultibandFilterSetHighCutoff", _wrap_MultibandFilterSetHighCutoff},
    { "MultibandFilterSetHighCutoffD", _wrap_MultibandFilterSetHighCutoffD},
    { "MultibandFilterUpdate", _wrap_MultibandFilterUpdate},
    { "MultibandFilterUpdateD", _wrap_MultibandFilterUpdateD},
    { "MultibandFilterProcess", _wrap_MultibandFilterProcess},
    { "MultibandFilterProcessD", _wrap_MultibandFilterProcessD},
    { "OnePoleInit", _wrap_OnePoleInit},
    { "OnePoleInitD", _wrap_OnePoleInitD},
    { "OnePoleRawInit", _wrap_OnePoleRawInit},
    { "OnePoleRawInitD", _wrap_OnePoleRawInitD},
    { "OnePoleFree", _wrap_OnePoleFree},
    { "OnePoleFreeD", _wrap_OnePoleFreeD},
    { "OnePoleFlush", _wrap_OnePoleFlush},
    { "OnePoleFlushD", _wrap_OnePoleFlushD},
    { "OnePoleSetType", _wrap_OnePoleSetType},
    { "OnePoleSetTypeD", _wrap_OnePoleSetTypeD},
    { "OnePoleSetCutoff", _wrap_OnePoleSetCutoff},
    { "OnePoleSetCutoffD", _wrap_OnePoleSetCutoffD},
    { "OnePoleSetSampleRate", _wrap_OnePoleSetSampleRate},
    { "OnePoleSetSampleRateD", _wrap_OnePoleSetSampleRateD},
    { "OnePoleSetCoefficients", _wrap_OnePoleSetCoefficients},
    { "OnePoleSetCoefficientsD", _wrap_OnePoleSetCoefficientsD},
    { "OnePoleProcess", _wrap_OnePoleProcess},
    { "OnePoleProcessD", _wrap_OnePoleProcessD},
    { "OnePoleTick", _wrap_OnePoleTick},
    { "OnePoleTickD", _wrap_OnePoleTickD},
    { "OnePoleAlpha", _wrap_OnePoleAlpha},
    { "OnePoleAlphaD", _wrap_OnePoleAlphaD},
    { "OnePoleBeta", _wrap_OnePoleBeta},
    { "OnePoleBetaD", _wrap_OnePoleBetaD},
    { "OptoInit", _wrap_OptoInit},
    { "OptoInitD", _wrap_OptoInitD},
    { "OptoFree", _wrap_OptoFree},
    { "OptoFreeD", _wrap_OptoFreeD},
    { "OptoSetDelay", _wrap_OptoSetDelay},
    { "OptoSetDelayD", _wrap_OptoSetDelayD},
    { "OptoProcess", _wrap_OptoProcess},
    { "OptoProcessD", _wrap_OptoProcessD},
    { "OptoTick", _wrap_OptoTick},
    { "OptoTickD", _wrap_OptoTickD},
    { "linear_pan", _wrap_linear_pan},
    { "linear_panD", _wrap_linear_panD},
    { "equal_power_3dB_pan", _wrap_equal_power_3dB_pan},
    { "equal_power_3dB_panD", _wrap_equal_power_3dB_panD},
    { "equal_power_6dB_pan", _wrap_equal_power_6dB_pan},
    { "equal_power_6dB_panD", _wrap_equal_power_6dB_panD},
    { "PolySaturatorInit", _wrap_PolySaturatorInit},
    { "PolySaturatorInitD", _wrap_PolySaturatorInitD},
    { "PolySaturatorFree", _wrap_PolySaturatorFree},
    { "PolySaturatorFreeD", _wrap_PolySaturatorFreeD},
    { "PolySaturatorSetN", _wrap_PolySaturatorSetN},
    { "PolySaturatorSetND", _wrap_PolySaturatorSetND},
    { "PolySaturatorProcess", _wrap_PolySaturatorProcess},
    { "PolySaturatorProcessD", _wrap_PolySaturatorProcessD},
    { "PolySaturatorTick", _wrap_PolySaturatorTick},
    { "PolySaturatorTickD", _wrap_PolySaturatorTickD},
    { "RBJFilterInit", _wrap_RBJFilterInit},
    { "RBJFilterInitD", _wrap_RBJFilterInitD},
    { "RBJFilterFree", _wrap_RBJFilterFree},
    { "RBJFilterFreeD", _wrap_RBJFilterFreeD},
    { "RBJFilterSetType", _wrap_RBJFilterSetType},
    { "RBJFilterSetTypeD", _wrap_RBJFilterSetTypeD},
    { "RBJFilterSetCutoff", _wrap_RBJFilterSetCutoff},
    { "RBJFilterSetCutoffD", _wrap_RBJFilterSetCutoffD},
    { "RBJFilterSetQ", _wrap_RBJFilterSetQ},
    { "RBJFilterSetQD", _wrap_RBJFilterSetQD},
    { "RBJFilterSetParams", _wrap_RBJFilterSetParams},
    { "RBJFilterSetParamsD", _wrap_RBJFilterSetParamsD},
    { "RBJFilterProcess", _wrap_RBJFilterProcess},
    { "RBJFilterProcessD", _wrap_RBJFilterProcessD},
    { "RBJFilterFlush", _wrap_RBJFilterFlush},
    { "RBJFilterFlushD", _wrap_RBJFilterFlushD},
    { "RMSEstimatorInit", _wrap_RMSEstimatorInit},
    { "RMSEstimatorInitD", _wrap_RMSEstimatorInitD},
    { "RMSEstimatorFree", _wrap_RMSEstimatorFree},
    { "RMSEstimatorFreeD", _wrap_RMSEstimatorFreeD},
    { "RMSEstimatorFlush", _wrap_RMSEstimatorFlush},
    { "RMSEstimatorFlushD", _wrap_RMSEstimatorFlushD},
    { "RMSEstimatorSetAvgTime", _wrap_RMSEstimatorSetAvgTime},
    { "RMSEstimatorSetAvgTimeD", _wrap_RMSEstimatorSetAvgTimeD},
    { "RMSEstimatorProcess", _wrap_RMSEstimatorProcess},
    { "RMSEstimatorProcessD", _wrap_RMSEstimatorProcessD},
    { "RMSEstimatorTick", _wrap_RMSEstimatorTick},
    { "RMSEstimatorTickD", _wrap_RMSEstimatorTickD},
    { "SpectrumAnalyzerInit", _wrap_SpectrumAnalyzerInit},
    { "SpectrumAnalyzerInitD", _wrap_SpectrumAnalyzerInitD},
    { "SpectrumAnalyzerAnalyze", _wrap_SpectrumAnalyzerAnalyze},
    { "SpectrumAnalyzerAnalyzeD", _wrap_SpectrumAnalyzerAnalyzeD},
    { "SpectralCentroid", _wrap_SpectralCentroid},
    { "SpectralCentroidD", _wrap_SpectralCentroidD},
    { "SpectralSpread", _wrap_SpectralSpread},
    { "SpectralSpreadD", _wrap_SpectralSpreadD},
    { "SpectralSkewness", _wrap_SpectralSkewness},
    { "SpectralSkewnessD", _wrap_SpectralSkewnessD},
    { "SpectralKurtosis", _wrap_SpectralKurtosis},
    { "SpectralKurtosisD", _wrap_SpectralKurtosisD},
    { "StereoToMono", _wrap_StereoToMono},
    { "StereoToMonoD", _wrap_StereoToMonoD},
    { "MonoToStereo", _wrap_MonoToStereo},
    { "MonoToStereoD", _wrap_MonoToStereoD},
    { "TapeInit", _wrap_TapeInit},
    { "TapeFree", _wrap_TapeFree},
    { "TapeSetSpeed", _wrap_TapeSetSpeed},
    { "TapeSetSaturation", _wrap_TapeSetSaturation},
    { "TapeSetHysteresis", _wrap_TapeSetHysteresis},
    { "TapeSetFlutter", _wrap_TapeSetFlutter},
    { "TapeGetSaturation", _wrap_TapeGetSaturation},
    { "TapeGetHysteresis", _wrap_TapeGetHysteresis},
    { "TapeProcess", _wrap_TapeProcess},
    { "TapeTick", _wrap_TapeTick},
    { "UpsamplerInit", _wrap_UpsamplerInit},
    { "UpsamplerInitD", _wrap_UpsamplerInitD},
    { "UpsamplerFree", _wrap_UpsamplerFree},
    { "UpsamplerFreeD", _wrap_UpsamplerFreeD},
    { "UpsamplerFlush", _wrap_UpsamplerFlush},
    { "UpsamplerFlushD", _wrap_UpsamplerFlushD},
    { "UpsamplerProcess", _wrap_UpsamplerProcess},
    { "UpsamplerProcessD", _wrap_UpsamplerProcessD},
    { "log2", _wrap_log2},
    { "log2f", _wrap_log2f},
    { "next_pow2", _wrap_next_pow2},
    { "f_abs", _wrap_f_abs},
    { "f_max", _wrap_f_max},
    { "f_min", _wrap_f_min},
    { "f_clamp", _wrap_f_clamp},
    { "f_pow2", _wrap_f_pow2},
    { "f_tanh", _wrap_f_tanh},
    { "int16ToFloat", _wrap_int16ToFloat},
    { "floatToInt16", _wrap_floatToInt16},
    { "AmpToDb", _wrap_AmpToDb},
    { "AmpToDbD", _wrap_AmpToDbD},
    { "DbToAmp", _wrap_DbToAmp},
    { "DbToAmpD", _wrap_DbToAmpD},
    { "RectToPolar", _wrap_RectToPolar},
    { "RectToPolarD", _wrap_RectToPolarD},
    { "PolarToRect", _wrap_PolarToRect},
    { "PolarToRectD", _wrap_PolarToRectD},
    { "boxcar", _wrap_boxcar},
    { "boxcarD", _wrap_boxcarD},
    { "hann", _wrap_hann},
    { "hannD", _wrap_hannD},
    { "hamming", _wrap_hamming},
    { "hammingD", _wrap_hammingD},
    { "blackman", _wrap_blackman},
    { "blackmanD", _wrap_blackmanD},
    { "tukey", _wrap_tukey},
    { "tukeyD", _wrap_tukeyD},
    { "cosine", _wrap_cosine},
    { "cosineD", _wrap_cosineD},
    { "lanczos", _wrap_lanczos},
    { "lanczosD", _wrap_lanczosD},
    { "bartlett", _wrap_bartlett},
    { "bartlettD", _wrap_bartlettD},
    { "gaussian", _wrap_gaussian},
    { "gaussianD", _wrap_gaussianD},
    { "bartlett_hann", _wrap_bartlett_hann},
    { "bartlett_hannD", _wrap_bartlett_hannD},
    { "kaiser", _wrap_kaiser},
    { "kaiserD", _wrap_kaiserD},
    { "nuttall", _wrap_nuttall},
    { "nuttallD", _wrap_nuttallD},
    { "blackman_harris", _wrap_blackman_harris},
    { "blackman_harrisD", _wrap_blackman_harrisD},
    { "blackman_nuttall", _wrap_blackman_nuttall},
    { "blackman_nuttallD", _wrap_blackman_nuttallD},
    { "flat_top", _wrap_flat_top},
    { "flat_topD", _wrap_flat_topD},
    { "poisson", _wrap_poisson},
    { "poissonD", _wrap_poissonD},
    { "chebyshev", _wrap_chebyshev},
    { "chebyshevD", _wrap_chebyshevD},
    { "WindowFunctionInit", _wrap_WindowFunctionInit},
    { "WindowFunctionInitD", _wrap_WindowFunctionInitD},
    { "WindowFunctionFree", _wrap_WindowFunctionFree},
    { "WindowFunctionFreeD", _wrap_WindowFunctionFreeD},
    { "WindowFunctionProcess", _wrap_WindowFunctionProcess},
    { "WindowFunctionProcessD", _wrap_WindowFunctionProcessD},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_FFTComplex,
&_wrap_class_FFTSplitComplex,
&_wrap_class_FFTComplexD,
&_wrap_class_FFTSplitComplexD,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "FxDSP",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_BS1770Meter = {"_p_BS1770Meter", "BS1770Meter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BS1770MeterD = {"_p_BS1770MeterD", "BS1770MeterD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BiquadFilter = {"_p_BiquadFilter", "BiquadFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BiquadFilterD = {"_p_BiquadFilterD", "BiquadFilterD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CircularBuffer = {"_p_CircularBuffer", "CircularBuffer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CircularBufferD = {"_p_CircularBufferD", "CircularBufferD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Decimator = {"_p_Decimator", "Decimator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DecimatorD = {"_p_DecimatorD", "DecimatorD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DiodeRectifier = {"_p_DiodeRectifier", "DiodeRectifier *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DiodeRectifierD = {"_p_DiodeRectifierD", "DiodeRectifierD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DiodeSaturator = {"_p_DiodeSaturator", "DiodeSaturator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DiodeSaturatorD = {"_p_DiodeSaturatorD", "DiodeSaturatorD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Error = {"_p_Error", "enum Error *|Error_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FFTComplex = {"_p_FFTComplex", "FFTComplex *", 0, 0, (void*)&_wrap_class_FFTComplex, 0};
static swig_type_info _swigt__p_FFTComplexD = {"_p_FFTComplexD", "FFTComplexD *", 0, 0, (void*)&_wrap_class_FFTComplexD, 0};
static swig_type_info _swigt__p_FFTConfig = {"_p_FFTConfig", "FFTConfig *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FFTConfigD = {"_p_FFTConfigD", "FFTConfigD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FFTSplitComplex = {"_p_FFTSplitComplex", "FFTSplitComplex *", 0, 0, (void*)&_wrap_class_FFTSplitComplex, 0};
static swig_type_info _swigt__p_FFTSplitComplexD = {"_p_FFTSplitComplexD", "FFTSplitComplexD *", 0, 0, (void*)&_wrap_class_FFTSplitComplexD, 0};
static swig_type_info _swigt__p_FIRFilter = {"_p_FIRFilter", "FIRFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FIRFilterD = {"_p_FIRFilterD", "FIRFilterD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Filter_t = {"_p_Filter_t", "enum Filter_t *|Filter_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_KWeightingFilter = {"_p_KWeightingFilter", "KWeightingFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_KWeightingFilterD = {"_p_KWeightingFilterD", "KWeightingFilterD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LRFilter = {"_p_LRFilter", "LRFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LRFilterD = {"_p_LRFilterD", "LRFilterD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LadderFilter = {"_p_LadderFilter", "LadderFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MeterScale = {"_p_MeterScale", "enum MeterScale *|MeterScale *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MultibandFilter = {"_p_MultibandFilter", "MultibandFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MultibandFilterD = {"_p_MultibandFilterD", "MultibandFilterD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OnePole = {"_p_OnePole", "OnePole *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OnePoleD = {"_p_OnePoleD", "OnePoleD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Opto = {"_p_Opto", "Opto *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OptoD = {"_p_OptoD", "OptoD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PolySaturator = {"_p_PolySaturator", "PolySaturator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PolySaturatorD = {"_p_PolySaturatorD", "PolySaturatorD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RBJFilter = {"_p_RBJFilter", "RBJFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RBJFilterD = {"_p_RBJFilterD", "RBJFilterD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RMSEstimator = {"_p_RMSEstimator", "RMSEstimator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RMSEstimatorD = {"_p_RMSEstimatorD", "RMSEstimatorD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpectrumAnalyzer = {"_p_SpectrumAnalyzer", "SpectrumAnalyzer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpectrumAnalyzerD = {"_p_SpectrumAnalyzerD", "SpectrumAnalyzerD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Tape = {"_p_Tape", "Tape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TapeSpeed = {"_p_TapeSpeed", "enum TapeSpeed *|TapeSpeed *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Upsampler = {"_p_Upsampler", "Upsampler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_UpsamplerD = {"_p_UpsamplerD", "UpsamplerD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WindowFunction = {"_p_WindowFunction", "WindowFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WindowFunctionD = {"_p_WindowFunctionD", "WindowFunctionD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__ConvolutionMode = {"_p__ConvolutionMode", "enum _ConvolutionMode *|ConvolutionMode_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__Opto_t = {"_p__Opto_t", "enum _Opto_t *|Opto_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__Window_t = {"_p__Window_t", "enum _Window_t *|Window_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__bias_t = {"_p__bias_t", "enum _bias_t *|bias_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_factor = {"_p_factor", "ResampleFactor_t *|enum factor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_double = {"_p_p_double", "double **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_float = {"_p_p_float", "float **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_p_double = {"_p_p_p_double", "double ***", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_p_float = {"_p_p_p_float", "float ***", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_BS1770Meter,
  &_swigt__p_BS1770MeterD,
  &_swigt__p_BiquadFilter,
  &_swigt__p_BiquadFilterD,
  &_swigt__p_CircularBuffer,
  &_swigt__p_CircularBufferD,
  &_swigt__p_Decimator,
  &_swigt__p_DecimatorD,
  &_swigt__p_DiodeRectifier,
  &_swigt__p_DiodeRectifierD,
  &_swigt__p_DiodeSaturator,
  &_swigt__p_DiodeSaturatorD,
  &_swigt__p_Error,
  &_swigt__p_FFTComplex,
  &_swigt__p_FFTComplexD,
  &_swigt__p_FFTConfig,
  &_swigt__p_FFTConfigD,
  &_swigt__p_FFTSplitComplex,
  &_swigt__p_FFTSplitComplexD,
  &_swigt__p_FIRFilter,
  &_swigt__p_FIRFilterD,
  &_swigt__p_Filter_t,
  &_swigt__p_KWeightingFilter,
  &_swigt__p_KWeightingFilterD,
  &_swigt__p_LRFilter,
  &_swigt__p_LRFilterD,
  &_swigt__p_LadderFilter,
  &_swigt__p_MeterScale,
  &_swigt__p_MultibandFilter,
  &_swigt__p_MultibandFilterD,
  &_swigt__p_OnePole,
  &_swigt__p_OnePoleD,
  &_swigt__p_Opto,
  &_swigt__p_OptoD,
  &_swigt__p_PolySaturator,
  &_swigt__p_PolySaturatorD,
  &_swigt__p_RBJFilter,
  &_swigt__p_RBJFilterD,
  &_swigt__p_RMSEstimator,
  &_swigt__p_RMSEstimatorD,
  &_swigt__p_SpectrumAnalyzer,
  &_swigt__p_SpectrumAnalyzerD,
  &_swigt__p_Tape,
  &_swigt__p_TapeSpeed,
  &_swigt__p_Upsampler,
  &_swigt__p_UpsamplerD,
  &_swigt__p_WindowFunction,
  &_swigt__p_WindowFunctionD,
  &_swigt__p__ConvolutionMode,
  &_swigt__p__Opto_t,
  &_swigt__p__Window_t,
  &_swigt__p__bias_t,
  &_swigt__p_double,
  &_swigt__p_factor,
  &_swigt__p_float,
  &_swigt__p_p_double,
  &_swigt__p_p_float,
  &_swigt__p_p_p_double,
  &_swigt__p_p_p_float,
  &_swigt__p_short,
  &_swigt__p_unsigned_int,
};

static swig_cast_info _swigc__p_BS1770Meter[] = {  {&_swigt__p_BS1770Meter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BS1770MeterD[] = {  {&_swigt__p_BS1770MeterD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BiquadFilter[] = {  {&_swigt__p_BiquadFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BiquadFilterD[] = {  {&_swigt__p_BiquadFilterD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CircularBuffer[] = {  {&_swigt__p_CircularBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CircularBufferD[] = {  {&_swigt__p_CircularBufferD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Decimator[] = {  {&_swigt__p_Decimator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DecimatorD[] = {  {&_swigt__p_DecimatorD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DiodeRectifier[] = {  {&_swigt__p_DiodeRectifier, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DiodeRectifierD[] = {  {&_swigt__p_DiodeRectifierD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DiodeSaturator[] = {  {&_swigt__p_DiodeSaturator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DiodeSaturatorD[] = {  {&_swigt__p_DiodeSaturatorD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Error[] = {  {&_swigt__p_Error, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FFTComplex[] = {  {&_swigt__p_FFTComplex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FFTComplexD[] = {  {&_swigt__p_FFTComplexD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FFTConfig[] = {  {&_swigt__p_FFTConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FFTConfigD[] = {  {&_swigt__p_FFTConfigD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FFTSplitComplex[] = {  {&_swigt__p_FFTSplitComplex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FFTSplitComplexD[] = {  {&_swigt__p_FFTSplitComplexD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIRFilter[] = {  {&_swigt__p_FIRFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FIRFilterD[] = {  {&_swigt__p_FIRFilterD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filter_t[] = {  {&_swigt__p_Filter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KWeightingFilter[] = {  {&_swigt__p_KWeightingFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KWeightingFilterD[] = {  {&_swigt__p_KWeightingFilterD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LRFilter[] = {  {&_swigt__p_LRFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LRFilterD[] = {  {&_swigt__p_LRFilterD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LadderFilter[] = {  {&_swigt__p_LadderFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MeterScale[] = {  {&_swigt__p_MeterScale, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MultibandFilter[] = {  {&_swigt__p_MultibandFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MultibandFilterD[] = {  {&_swigt__p_MultibandFilterD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OnePole[] = {  {&_swigt__p_OnePole, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OnePoleD[] = {  {&_swigt__p_OnePoleD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Opto[] = {  {&_swigt__p_Opto, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OptoD[] = {  {&_swigt__p_OptoD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PolySaturator[] = {  {&_swigt__p_PolySaturator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PolySaturatorD[] = {  {&_swigt__p_PolySaturatorD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RBJFilter[] = {  {&_swigt__p_RBJFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RBJFilterD[] = {  {&_swigt__p_RBJFilterD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RMSEstimator[] = {  {&_swigt__p_RMSEstimator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RMSEstimatorD[] = {  {&_swigt__p_RMSEstimatorD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpectrumAnalyzer[] = {  {&_swigt__p_SpectrumAnalyzer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpectrumAnalyzerD[] = {  {&_swigt__p_SpectrumAnalyzerD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Tape[] = {  {&_swigt__p_Tape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TapeSpeed[] = {  {&_swigt__p_TapeSpeed, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Upsampler[] = {  {&_swigt__p_Upsampler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UpsamplerD[] = {  {&_swigt__p_UpsamplerD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WindowFunction[] = {  {&_swigt__p_WindowFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WindowFunctionD[] = {  {&_swigt__p_WindowFunctionD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__ConvolutionMode[] = {  {&_swigt__p__ConvolutionMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__Opto_t[] = {  {&_swigt__p__Opto_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__Window_t[] = {  {&_swigt__p__Window_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__bias_t[] = {  {&_swigt__p__bias_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_factor[] = {  {&_swigt__p_factor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_double[] = {  {&_swigt__p_p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_float[] = {  {&_swigt__p_p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_p_double[] = {  {&_swigt__p_p_p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_p_float[] = {  {&_swigt__p_p_p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_BS1770Meter,
  _swigc__p_BS1770MeterD,
  _swigc__p_BiquadFilter,
  _swigc__p_BiquadFilterD,
  _swigc__p_CircularBuffer,
  _swigc__p_CircularBufferD,
  _swigc__p_Decimator,
  _swigc__p_DecimatorD,
  _swigc__p_DiodeRectifier,
  _swigc__p_DiodeRectifierD,
  _swigc__p_DiodeSaturator,
  _swigc__p_DiodeSaturatorD,
  _swigc__p_Error,
  _swigc__p_FFTComplex,
  _swigc__p_FFTComplexD,
  _swigc__p_FFTConfig,
  _swigc__p_FFTConfigD,
  _swigc__p_FFTSplitComplex,
  _swigc__p_FFTSplitComplexD,
  _swigc__p_FIRFilter,
  _swigc__p_FIRFilterD,
  _swigc__p_Filter_t,
  _swigc__p_KWeightingFilter,
  _swigc__p_KWeightingFilterD,
  _swigc__p_LRFilter,
  _swigc__p_LRFilterD,
  _swigc__p_LadderFilter,
  _swigc__p_MeterScale,
  _swigc__p_MultibandFilter,
  _swigc__p_MultibandFilterD,
  _swigc__p_OnePole,
  _swigc__p_OnePoleD,
  _swigc__p_Opto,
  _swigc__p_OptoD,
  _swigc__p_PolySaturator,
  _swigc__p_PolySaturatorD,
  _swigc__p_RBJFilter,
  _swigc__p_RBJFilterD,
  _swigc__p_RMSEstimator,
  _swigc__p_RMSEstimatorD,
  _swigc__p_SpectrumAnalyzer,
  _swigc__p_SpectrumAnalyzerD,
  _swigc__p_Tape,
  _swigc__p_TapeSpeed,
  _swigc__p_Upsampler,
  _swigc__p_UpsamplerD,
  _swigc__p_WindowFunction,
  _swigc__p_WindowFunctionD,
  _swigc__p__ConvolutionMode,
  _swigc__p__Opto_t,
  _swigc__p__Window_t,
  _swigc__p__bias_t,
  _swigc__p_double,
  _swigc__p_factor,
  _swigc__p_float,
  _swigc__p_p_double,
  _swigc__p_p_float,
  _swigc__p_p_p_double,
  _swigc__p_p_p_float,
  _swigc__p_short,
  _swigc__p_unsigned_int,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

